{"version":3,"sources":["components/ToDoItem/ToDoItem.module.css","components/EditableTitle/EditableTitle.tsx","components/ToDoItem/ToDoItem.tsx","components/AddItemForm/AddItemForm.tsx","components/ToDoList/ToDoList.tsx","state/reducers/todolists.ts","state/types/todolists.ts","App.tsx","pureFunctions.tsx","state/actions/todolists.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","EditableTitle","title","toDoListId","taskId","changeToDoListTitleCallback","changeTaskTitleCallback","useState","editMode","setEditMode","localTitle","setLocalTitle","activateViewMode","TextField","value","autoFocus","onChange","event","currentTarget","onKeyPress","key","onBlur","onDoubleClick","ToDoItem","isDone","deleteTaskCallback","changeSelectedCallback","className","s","listItem","IconButton","onClick","Delete","container","Checkbox","color","checked","e","done","undone","AddItemForm","setValueCallback","addTaskCallback","addToDoListCallback","error","setError","onAddValue","trim","length","variant","helperText","label","AddBox","ToDoList","filter","tasks","changeFilterCallback","deleteToDoListCallback","newTitle","setNewTitle","mappedTasks","map","task","id","changeFilter","innerText","split","letter","idx","toLowerCase","join","Grid","item","Paper","style","padding","tabIndex","Button","size","todolistsReducer","state","action","type","tdl","payload","Error","App","toDoListId1","v1","toDoListId2","newToDoListTitle","setNewToDoListTitle","toDoLists","setToDoLists","setTasks","changeTaskTitle","select","changeSelected","t","deleteTask","addTask","toDoListsId","cloneTasks","clone","deleteTasks","mappedToDoList","tasksForToDoList","filterValue","filterTasks","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","newToDoListId","createNewTasksArray","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d9ee5504.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ToDoItem_listItem__3EoOg\",\"done\":\"ToDoItem_done__fY9eC\",\"undone\":\"ToDoItem_undone__3LgIO\",\"container\":\"ToDoItem_container__ofRBV\"};","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\nimport { TextField } from '@material-ui/core'\n\ntype EditableTitleTypes = {\n    title: string\n    taskId?: string\n    toDoListId: string\n    changeToDoListTitleCallback?: (title: string, toDoListId: string) => void\n    changeTaskTitleCallback?: (taskId: string, title: string, toDoListId: string) => void\n}\n\nexport const EditableTitle: React.FC<EditableTitleTypes> = (\n    {\n        title, toDoListId, taskId,\n        changeToDoListTitleCallback, changeTaskTitleCallback,\n    }) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [localTitle, setLocalTitle] = useState<string>(title)\n\n    const activateEditMode = () => setEditMode(true)\n    const activateViewMode = () => {\n        changeToDoListTitleCallback && changeToDoListTitleCallback(localTitle, toDoListId)\n        changeTaskTitleCallback && taskId && changeTaskTitleCallback(taskId, localTitle, toDoListId)\n        setEditMode(false)\n    }\n    const changeLocalTitle = (event: ChangeEvent<HTMLInputElement>) =>\n        setLocalTitle(event.currentTarget.value)\n\n    const onKeyPressActivateViewMode = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') activateViewMode()\n    }\n\n    return editMode\n        ? <TextField\n            value={ localTitle }\n            autoFocus\n            onChange={ changeLocalTitle }\n            onKeyPress={ onKeyPressActivateViewMode }\n            onBlur={ activateViewMode }\n        />\n        : <span\n            onDoubleClick={ activateEditMode }\n        >{ localTitle }</span>\n}","import React, { ChangeEvent } from 'react'\nimport s from './ToDoItem.module.css'\nimport { EditableTitle } from '../EditableTitle/EditableTitle'\nimport { Checkbox, IconButton } from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\n\ntype ToDoItemPropTypes = {\n    taskId: string\n    toDoListId: string\n    title: string\n    isDone: boolean\n    deleteTaskCallback: (taskId: string, toDoListId: string) => void\n    changeSelectedCallback: (taskId: string, select: boolean, toDoListId: string) => void\n    changeTaskTitleCallback: (taskId: string, title: string, toDoListId: string) => void\n}\n\nexport const ToDoItem: React.FC<ToDoItemPropTypes> = (\n    {\n        taskId, toDoListId,\n        title, isDone,\n        deleteTaskCallback, changeSelectedCallback,\n        changeTaskTitleCallback,\n    }) => {\n\n    const onChangeTaskStatus = (e: ChangeEvent) =>\n        changeSelectedCallback(taskId, (e.currentTarget as HTMLInputElement).checked, toDoListId)\n\n    const deleteTask = () => deleteTaskCallback(taskId, toDoListId)\n    return (\n        <div className={ s.listItem }>\n            <IconButton onClick={ deleteTask }>\n                <Delete/>\n            </IconButton>\n            <div className={ s.container }>\n                <Checkbox\n                    color={ 'primary' }\n                    checked={ isDone }\n                    onChange={ onChangeTaskStatus }\n                />\n                <span className={ isDone ? s.done : s.undone }>\n                    <EditableTitle\n                        title={ title }\n                        taskId={ taskId }\n                        toDoListId={ toDoListId }\n                        changeTaskTitleCallback={ changeTaskTitleCallback }\n                    />\n                </span>\n            </div>\n        </div>\n    )\n}","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\nimport { IconButton, TextField } from '@material-ui/core'\nimport { AddBox } from '@material-ui/icons'\n\nexport type AddItemFormTypes = {\n    value: string\n    setValueCallback: (value: string) => void\n    toDoListId?: string\n    addTaskCallback?: (title: string, toDoListId: string) => void\n    addToDoListCallback?: (title: string) => void\n}\n\nexport const AddItemForm: React.FC<AddItemFormTypes> = (\n    {\n        value, setValueCallback,\n        toDoListId, addTaskCallback,\n        addToDoListCallback,\n    }) => {\n    const [error, setError] = useState<string>('')\n\n    const addError = () => {\n        setError(() => 'Title is required')\n        setValueCallback('')\n    }\n    const addNewValue = () => {\n        setValueCallback('')\n        addTaskCallback && toDoListId && addTaskCallback(value, toDoListId)\n        addToDoListCallback && addToDoListCallback(value)\n    }\n    const onAddValue = () => value.trim().length ? addNewValue() : addError()\n    const onChangeValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setError(() => '')\n        const value = event.currentTarget?.value\n        setValueCallback(value)\n    }\n    const onKeyPressValue = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') onAddValue()\n    }\n\n    return (\n        <>\n            <div>\n                <TextField\n                    value={ value }\n                    variant={ 'outlined' }\n                    error={ !!error }\n                    onChange={ onChangeValue }\n                    onKeyPress={ onKeyPressValue }\n                    helperText={ error }\n                    label={ 'Title' }\n                />\n                <IconButton\n                    color={ 'primary' }\n                    onClick={ onAddValue }\n                >\n                    <AddBox/>\n                </IconButton>\n            </div>\n        </>\n    )\n}","import React, { useState, MouseEvent } from 'react'\nimport { ToDoItem } from '../ToDoItem/ToDoItem'\nimport { FilterPropTypes, TaskPropTypes } from '../../App'\nimport { AddItemForm } from '../AddItemForm/AddItemForm'\nimport { EditableTitle } from '../EditableTitle/EditableTitle'\nimport { Button, Grid, IconButton, Paper } from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\n\n\nexport type ToDoListPropTypes = {\n    toDoListId: string\n    filter: FilterPropTypes\n    title: string\n    tasks: Array<TaskPropTypes>\n    changeFilterCallback: (filter: FilterPropTypes, toDoListId: string) => void\n    addTaskCallback: (title: string, toDoListId: string) => void\n    deleteTaskCallback: (taskId: string, toDoListId: string) => void\n    changeSelectedCallback: (taskId: string, select: boolean, toDoListId: string) => void\n    deleteToDoListCallback: (toDoListId: string) => void\n    changeToDoListTitleCallback: (title: string, toDoListId: string) => void\n    changeTaskTitleCallback: (taskId: string, title: string, toDoListId: string) => void\n}\n\nexport const ToDoList: React.FC<ToDoListPropTypes> = (\n    {\n        toDoListId, filter, title, tasks,\n        changeFilterCallback, deleteTaskCallback,\n        addTaskCallback, changeSelectedCallback,\n        deleteToDoListCallback, changeToDoListTitleCallback,\n        changeTaskTitleCallback,\n    }) => {\n\n    const [newTitle, setNewTitle] = useState<string>('')\n\n    const mappedTasks = tasks.map((task) => (\n        <ToDoItem\n            key={ task.id }\n            taskId={ task.id }\n            toDoListId={ toDoListId }\n            title={ task.title }\n            isDone={ task.isDone }\n            deleteTaskCallback={ deleteTaskCallback }\n            changeSelectedCallback={ changeSelectedCallback }\n            changeTaskTitleCallback={ changeTaskTitleCallback }\n        />\n    ))\n\n    const changeFilter = (event: MouseEvent<HTMLButtonElement>) => {\n        const value = event.currentTarget.innerText\n            .split('')\n            .map((letter, idx) => idx > 0 ? letter.toLowerCase() : letter)\n            .join('')\n        changeFilterCallback(value as FilterPropTypes, toDoListId)\n    }\n\n    const deleteToDoListId = () => deleteToDoListCallback(toDoListId)\n\n    return (\n        <Grid item>\n            <Paper style={ { padding: '10px' } }>\n                <h3>\n                    <IconButton tabIndex={ toDoListId } onClick={ deleteToDoListId }>\n                        <Delete/>\n                    </IconButton>\n                    <EditableTitle\n                        title={ title }\n                        toDoListId={ toDoListId }\n                        changeToDoListTitleCallback={ changeToDoListTitleCallback }\n                    />\n                </h3>\n                <AddItemForm\n                    value={ newTitle }\n                    toDoListId={ toDoListId }\n                    setValueCallback={ setNewTitle }\n                    addTaskCallback={ addTaskCallback }\n                />\n                { mappedTasks }\n                <div>\n                    <Button\n                        size={ 'small' }\n                        onClick={ changeFilter }\n                        variant={ 'contained' }\n                        color={ filter === 'All' ? 'primary' : 'default' }\n                    >All\n                    </Button>\n                    <Button\n                        size={ 'small' }\n                        onClick={ changeFilter }\n                        variant={ 'contained' }\n                        color={ filter === 'Active' ? 'primary' : 'default' }\n                    >Active\n                    </Button>\n                    <Button\n                        size={ 'small' }\n                        onClick={ changeFilter }\n                        variant={ 'contained' }\n                        color={ filter === 'Completed' ? 'primary' : 'default' }\n                    >Completed\n                    </Button>\n                </div>\n            </Paper>\n        </Grid>\n    )\n}","import { ToDoListTypes } from '../../App'\nimport * as types from '../types/todolists'\nimport * as actions from '../actions/todolists'\n\nexport type RemoveTodosType = ReturnType<typeof actions.removeTodoList>\nexport type AddTodosType = ReturnType<typeof actions.addTodoList>\nexport type ChangeTodosTitleType = ReturnType<typeof actions.changeTodoListTitle>\nexport type ChangeTodosFilterType = ReturnType<typeof actions.changeTodoListFilter>\ntype ActionType = RemoveTodosType | AddTodosType | ChangeTodosTitleType | ChangeTodosFilterType\n\n\nexport const todolistsReducer = (state: Array<ToDoListTypes>, action: ActionType): ToDoListTypes[] => {\n    switch (action.type) {\n        case types.REMOVE_TODOLIST:\n            return state.filter(tdl => tdl.id !== action.payload.id)\n        case types.ADD_TODOLIST:\n            return [\n                ...state,\n                {\n                    id: action.payload.id,\n                    title: action.payload.title,\n                    filter: 'All',\n                },\n            ]\n        case types.CHANGE_TODOLIST_TITLE:\n            return state.map(tdl => tdl.id === action.payload.id ? { ...tdl, title: action.payload.title } : tdl)\n        case types.CHANGE_TODOLIST_FILTER:\n            return state.map(tdl => tdl.id === action.payload.id ? { ...tdl, filter: action.payload.filter } : tdl)\n        default:\n            throw new Error(`I don't understand this type`)\n    }\n}","export const REMOVE_TODOLIST = 'REMOVE-TODOLIST'\nexport const ADD_TODOLIST = 'ADD-TODOLIST'\nexport const CHANGE_TODOLIST_TITLE = 'CHANGE-TODOLIST-TITLE'\nexport const CHANGE_TODOLIST_FILTER = 'CHANGE-TODOLIST-FILTER'","import React, { useState } from 'react'\r\nimport { v1 } from 'uuid'\r\nimport { ToDoList } from './components/ToDoList/ToDoList'\r\nimport { AddItemForm } from './components/AddItemForm/AddItemForm'\r\nimport {\r\n    addTask, changeSelected, changeTaskTitle, createNewTasksArray,\r\n    deleteTask, deleteTasks, filterTasks,\r\n} from './pureFunctions'\r\nimport { AppBar, Container, Grid, IconButton, Toolbar, Typography } from '@material-ui/core'\r\nimport { Menu } from '@material-ui/icons'\r\nimport AccountCircle from '@material-ui/icons/AccountCircle'\r\nimport { todolistsReducer } from './state/reducers/todolists'\r\nimport * as todolistsActions from './state/actions/todolists'\r\n// Types\r\nexport type FilterPropTypes = 'All' | 'Active' | 'Completed'\r\nexport type ToDoListTypes = {\r\n    id: string\r\n    title: string\r\n    filter: FilterPropTypes\r\n}\r\nexport type TaskPropTypes = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TaskStateTypes = { [ key: string ]: Array<TaskPropTypes> }\r\n\r\nexport const App = () => {\r\n    const toDoListId1 = v1()\r\n    const toDoListId2 = v1()\r\n    const [newToDoListTitle, setNewToDoListTitle] = useState<string>('')\r\n    const [toDoLists, setToDoLists] = useState<Array<ToDoListTypes>>([\r\n        { id: toDoListId1, title: 'What to learn', filter: 'All' },\r\n        { id: toDoListId2, title: 'What to buy', filter: 'All' },\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateTypes>({\r\n        [ toDoListId1 ]: [\r\n            { id: v1(), title: 'HTML&CSS', isDone: true },\r\n            { id: v1(), title: 'JS', isDone: true },\r\n            { id: v1(), title: 'React', isDone: false },\r\n        ],\r\n        [ toDoListId2 ]: [\r\n            { id: v1(), title: 'Beer', isDone: true },\r\n            { id: v1(), title: 'Cheese', isDone: true },\r\n            { id: v1(), title: 'Meat', isDone: false },\r\n        ],\r\n    })\r\n\r\n    const changeTaskTitleCallback = (taskId: string, title: string, toDoListId: string) =>\r\n        setTasks(() => changeTaskTitle(tasks, taskId, title, toDoListId))\r\n    const changeSelectedCallback = (taskId: string, select: boolean, toDoListId: string) =>\r\n        setTasks(() => changeSelected(tasks, taskId, select, toDoListId))\r\n    const deleteTaskCallback = (taskId: string, toDoListId: string) =>\r\n        setTasks(() => deleteTask(tasks, taskId, toDoListId))\r\n    const addTaskCallback = (title: string, toDoListId: string) =>\r\n        setTasks(() => addTask(tasks, title, toDoListId))\r\n\r\n    // with reducers\r\n    const deleteToDoListCallback = (toDoListId: string) => {\r\n        setToDoLists(() => todolistsReducer(toDoLists, todolistsActions.removeTodoList(toDoListId)))\r\n        setTasks(deleteTasks(tasks, toDoListId))\r\n    }\r\n    const addToDoListCallback = (title: string) => {\r\n        const newToDoListId = v1()\r\n        setToDoLists(() => todolistsReducer(toDoLists, todolistsActions.addTodoList(title, newToDoListId)))\r\n        setTasks(() => createNewTasksArray(tasks, newToDoListId))\r\n    }\r\n    const changeToDoListTitleCallback = (title: string, toDoListId: string) =>\r\n        setToDoLists(() => todolistsReducer(toDoLists, todolistsActions.changeTodoListTitle(toDoListId, title)))\r\n    const changeFilterCallback = (filter: FilterPropTypes, toDoListId: string) =>\r\n        setToDoLists(todolistsReducer(toDoLists, todolistsActions.changeTodoListFilter(toDoListId, filter)))\r\n\r\n\r\n    const mappedToDoList = toDoLists.map(tdl => {\r\n        let tasksForToDoList = filterTasks(tasks[ tdl.id ], tdl.filter)\r\n        return <ToDoList\r\n            toDoListId={ tdl.id }\r\n            key={ tdl.id }\r\n            filter={ tdl.filter }\r\n            title={ tdl.title }\r\n            tasks={ tasksForToDoList }\r\n            changeFilterCallback={ changeFilterCallback }\r\n            addTaskCallback={ addTaskCallback }\r\n            deleteTaskCallback={ deleteTaskCallback }\r\n            changeSelectedCallback={ changeSelectedCallback }\r\n            deleteToDoListCallback={ deleteToDoListCallback }\r\n            changeToDoListTitleCallback={ changeToDoListTitleCallback }\r\n            changeTaskTitleCallback={ changeTaskTitleCallback }\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position={ 'static' }>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge={ 'start' }\r\n                        color={ 'inherit' }\r\n                        aria-label={ 'menu' }\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={ 'h6' }>\r\n                        To Do Clone\r\n                    </Typography>\r\n                    <IconButton\r\n                        color={ 'inherit' }\r\n                        aria-label={ 'login' }\r\n                    >\r\n                        <AccountCircle/>\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={ { padding: '20px' } }>\r\n                    <AddItemForm\r\n                        value={ newToDoListTitle }\r\n                        setValueCallback={ setNewToDoListTitle }\r\n                        addToDoListCallback={ addToDoListCallback }\r\n                    />\r\n                </Grid>\r\n                <Grid container spacing={ 1 }>\r\n                    { mappedToDoList }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import { v1 } from 'uuid'\nimport clone from 'clone-deep'\nimport { FilterPropTypes, TaskPropTypes, TaskStateTypes, ToDoListTypes } from './App'\n\nexport const filterTasks = (tasks: Array<TaskPropTypes>, filterValue: FilterPropTypes): Array<TaskPropTypes> => {\n    switch (filterValue) {\n        case ('Active'):\n            return tasks.filter(t => !t.isDone)\n        case ('Completed'):\n            return tasks.filter(t => t.isDone)\n        default:\n            return [...tasks]\n    }\n}\n\nexport const createNewTasksArray = (tasks: TaskStateTypes, newToDoListId: string): TaskStateTypes => {\n    return { ...tasks, [ newToDoListId ]: [] }\n}\n\nexport const addTask = (tasks: TaskStateTypes, title: string, toDoListId: string): TaskStateTypes => {\n    const task = { id: v1(), title, isDone: false }\n    return { ...tasks, [ toDoListId ]: [task, ...tasks[ toDoListId ]] }\n}\n\nexport const deleteTask = (tasks: TaskStateTypes, taskId: string, toDoListId: string): TaskStateTypes => {\n    return { ...tasks, [ toDoListId ]: tasks[ toDoListId ].filter(t => t.id !== taskId) }\n}\n\nexport const deleteTasks = (\n    tasks: TaskStateTypes,\n    toDoListsId: string,\n): TaskStateTypes => {\n    const cloneTasks = clone(tasks)\n    delete cloneTasks[ toDoListsId ]\n    return cloneTasks\n}\n\nexport const changeSelected = (\n    tasks: TaskStateTypes,\n    taskId: string,\n    isDone: boolean,\n    toDoListId: string,\n): TaskStateTypes => {\n    return {\n        ...tasks,\n        [ toDoListId ]: tasks[ toDoListId ].map(task => task.id === taskId ? { ...task, isDone } : task),\n    }\n}\n\n\nexport const changeTaskTitle = (\n    tasks: TaskStateTypes,\n    taskId: string,\n    title: string,\n    toDoListId: string,\n): TaskStateTypes => {\n    return {\n        ...tasks,\n        [ toDoListId ]: tasks[ toDoListId ].map(task => task.id === taskId ? { ...task, title } : task),\n    }\n}\n\n// написан редьюсер в todolist-reducer\nexport const addToDoList = (\n    toDoLists: Array<ToDoListTypes>,\n    newToDoListId: string,\n    title: string,\n): Array<ToDoListTypes> => {\n    return [...toDoLists, { id: newToDoListId, title, filter: 'All' }]\n}\n\n// написан редьюсер в todolist-reducer\nexport const deleteToDoList = (\n    toDoLists: Array<ToDoListTypes>,\n    toDoListsId: string,\n): Array<ToDoListTypes> => {\n    return toDoLists.filter(tdl => tdl.id !== toDoListsId)\n}\n\n// написан редьюсер в todolist-reducer\nexport const changeToDoListFilter = (\n    toDoLists: Array<ToDoListTypes>,\n    filter: FilterPropTypes,\n    toDoListId: string,\n): Array<ToDoListTypes> => {\n    return toDoLists.map(tdl => tdl.id === toDoListId ? { ...tdl, filter } : tdl)\n}\n\n// написан редьюсер в todolist-reducer\nexport const changeToDoListTitle = (\n    toDoLists: Array<ToDoListTypes>,\n    title: string,\n    toDoListId: string,\n): Array<ToDoListTypes> => {\n    return toDoLists.map(tdl => tdl.id === toDoListId ? { ...tdl, title } : tdl)\n}\n","import * as types from '../types/todolists'\nimport { FilterPropTypes } from '../../App'\n\nexport const removeTodoList = (id: string) => ({\n    type: types.REMOVE_TODOLIST,\n    payload: {\n        id,\n    },\n} as const)\n\nexport const addTodoList = (newTodolistTitle: string, id: string) => ({\n    type: types.ADD_TODOLIST,\n    payload: {\n        id,\n        title: newTodolistTitle,\n    },\n} as const)\n\nexport const changeTodoListTitle = (todolistId: string, newTodolistTitle: string) => ({\n    type: types.CHANGE_TODOLIST_TITLE,\n    payload: {\n        id: todolistId,\n        title: newTodolistTitle,\n    },\n} as const)\n\nexport const changeTodoListFilter = (todolistId: string, newFilter: FilterPropTypes) => ({\n    type: types.CHANGE_TODOLIST_FILTER,\n    payload: {\n        id: todolistId,\n        filter: newFilter,\n    },\n} as const)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport { App } from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'))\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}