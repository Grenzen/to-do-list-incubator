{"version":3,"sources":["components/ToDoItem/ToDoItem.module.css","state/reducers/todoLists.ts","state/reducers/tasks.ts","state/reducers/index.ts","state/types/tasks.ts","state/types/todoLists.ts","state/index.ts","state/selectors/todoLists.ts","components/EditableTitle/EditableTitle.tsx","components/ToDoItem/ToDoItem.tsx","components/AddItemForm/AddItemForm.tsx","state/selectors/tasks.ts","state/types/taskFilter.ts","components/ToDoList/ToDoList.tsx","state/reducers/taskFilter.ts","state/actions/taskFilter.ts","state/actions/todoLists.ts","state/actions/tasks.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","toDoListId1","v1","toDoListId2","initialState","newTodoListTitle","todoLists","id","title","filter","newTaskTitle","tasks","isDone","combineReducers","state","action","type","newToDoListId","payload","newTaskId","newTaskIsDone","toDoListId","newTask","taskId","task","toDoListsId","cloneState","clone","newTitle","map","todolists","tdl","todolistId","newTodolistId","newTodolistTitle","newTodolistFilter","newFilter","useAppDispatch","useDispatch","store","createStore","rootReducers","todoListsSelector","EditableTitle","React","memo","changeToDoListTitleCallback","changeTaskTitleCallback","console","log","useState","editMode","setEditMode","localTitle","setLocalTitle","activateViewMode","TextField","value","autoFocus","onChange","event","currentTarget","onKeyPress","key","onBlur","onDoubleClick","ToDoItem","deleteTaskCallback","changeSelectedCallback","onChangeTaskStatus","useCallback","e","checked","deleteTask","className","s","listItem","IconButton","onClick","Delete","container","Checkbox","color","done","undone","AddItemForm","setNewToDoListTitleCallback","addTaskCallback","addToDoListCallback","setNewTaskTitleCallback","error","setError","onAddValue","trim","length","variant","helperText","label","AddBox","tasksSelector","ALL","ACTIVE","COMPLETED","SET_TASK_ARRAY","ToDoList","dispatch","useSelector","filteredTask","useMemo","types","taskFilterReducer","changeFilter","innerText","select","tasksActions","deleteToDoList","mappedTasks","Grid","item","Paper","style","padding","tabIndex","Button","size","App","setNewTodoListTitleCallback","todolistsActions","mappedToDoList","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,KAAO,uBAAuB,OAAS,yBAAyB,UAAY,8B,mXCIvHC,EAAcC,cACdC,EAAcD,cAarBE,EAAkC,CACpCC,iBAAkB,GAClBC,UAAW,CACP,CAAEC,GAAIN,EAAaO,MAAO,gBAAiBC,OAAQ,OACnD,CAAEF,GAAIJ,EAAaK,MAAO,cAAeC,OAAQ,SCHnDL,GAA6B,mBAC7BH,EAAe,CACbS,aAAc,GACdC,MACI,CACI,CAAEJ,GAAIL,cAAMM,MAAO,WAAYI,QAAQ,GACvC,CAAEL,GAAIL,cAAMM,MAAO,KAAMI,QAAQ,GACjC,CAAEL,GAAIL,cAAMM,MAAO,UAAWI,QAAQ,MAPnB,cAU7BT,EAAe,CACbO,aAAc,GACdC,MAAO,CACH,CAAEJ,GAAIL,cAAMM,MAAO,OAAQI,QAAQ,GACnC,CAAEL,GAAIL,cAAMM,MAAO,OAAQI,QAAQ,GACnC,CAAEL,GAAIL,cAAMM,MAAO,OAAQI,QAAQ,MAfZ,GChBpBC,cAAgB,CAC3BF,MDmCwB,WAAsE,IAArEG,EAAoE,uDAA5DV,EAAcW,EAA8C,uCAC7F,OAAQA,EAAOC,MACX,IE1C4B,4BF2CxB,IAAQC,EAAkBF,EAAOG,QAAzBD,cACR,OAAO,2BACAH,GADP,kBAEMG,EAAiB,CACfP,aAAc,GACdC,MAAO,MAInB,IEnDgB,iBFoDZ,MAA+DI,EAAOG,QAA9DR,EAAR,EAAQA,aAAcS,EAAtB,EAAsBA,UAAWC,EAAjC,EAAiCA,cAAeC,EAAhD,EAAgDA,WAC1CC,EAAqB,CACvBf,GAAIY,EACJX,MAAOE,EACPE,OAAQQ,GAEZ,OAAO,2BACAN,GADP,kBAEMO,EAFN,2BAGWP,EAAOO,IAHlB,IAIQV,MAAM,CACFW,GADC,mBAEER,EAAOO,GAAaV,YAKvC,IEnEmB,oBFoEf,MAA+BI,EAAOG,QAA9BG,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,OACpB,OAAO,2BACAT,GADP,kBAEMO,EAFN,2BAGWP,EAAOO,IAHlB,IAIQV,MAAOG,EAAOO,GAAaV,MAAMF,QAAO,SAAAe,GAAI,OAAIA,EAAKjB,KAAOgB,SAIxE,IE5E0B,2BF6EtB,IAAQE,EAAgBV,EAAOG,QAAvBO,YACFC,EAAaC,IAAMb,GAEzB,cADOY,EAAYD,GACZ,eAAKC,GAEhB,IEhFyB,0BFiFrB,MAAyCX,EAAOG,QAAxCG,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,OAAQK,EAA5B,EAA4BA,SAC5B,OAAO,2BACAd,GADP,kBAEMO,EAFN,2BAGWP,EAAOO,IAHlB,IAIQV,MAAOG,EAAOO,GAAaV,MAAMkB,KAAI,SAAAL,GAAI,OAAIA,EAAKjB,KAAOgB,EAAZ,2BACtCC,GADsC,IAEzChB,MAAOoB,IACPJ,SAIhB,IE5FqB,sBF6FjB,MAAuCT,EAAOG,QAAtCG,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,OAAQX,EAA5B,EAA4BA,OAC5B,OAAO,2BACAE,GADP,kBAEMO,EAFN,2BAGWP,EAAOO,IAHlB,IAIQV,MAAOG,EAAOO,GAAaV,MAAMkB,KAAI,SAAAL,GAAI,OAAIA,EAAKjB,KAAOgB,EAAZ,2BAA0BC,GAA1B,IAAgCZ,WAAWY,SAIpG,IEpG0B,2BFqGtB,MAAqCT,EAAOG,QAApCR,EAAR,EAAQA,aAAcW,EAAtB,EAAsBA,WACtB,OAAO,2BACAP,GADP,kBAEMO,EAFN,2BAGWP,EAAOO,IAHlB,IAIQX,aAAcA,MAI1B,QACI,OAAOI,IClHfgB,UFqB4B,WAA2E,IAA1EhB,EAAyE,uDAAjEV,EAAcW,EAAmD,uCACtG,OAAQA,EAAOC,MACX,II7BuB,4BJ8BnB,OAAO,2BACAF,GADP,IAEIR,UAAWQ,EAAMR,UAAUG,QAAO,SAAAsB,GAAG,OAAIA,EAAIxB,KAAOQ,EAAOG,QAAQc,gBAE3E,IIjCoB,yBJkChB,OAAO,2BACAlB,GADP,IAEIR,UAAU,GAAD,mBACFQ,EAAMR,WADJ,CAEL,CACIC,GAAIQ,EAAOG,QAAQe,cACnBzB,MAAOO,EAAOG,QAAQgB,iBACtBzB,OAAQM,EAAOG,QAAQiB,uBAIvC,II5C6B,kCJ6CzB,OAAO,2BACArB,GADP,IAEIR,UAAWQ,EAAMR,UAAUuB,KAAI,SAAAE,GAAG,OAAIA,EAAIxB,KAAOQ,EAAOG,QAAQc,WAA1B,2BAC7BD,GAD6B,IACxBvB,MAAOO,EAAOG,QAAQgB,mBAAqBH,OAEjE,IIjD8B,mCJkD1B,OAAO,2BACAjB,GADP,IAEIR,UAAWQ,EAAMR,UAAUuB,KAAI,SAAAE,GAAG,OAAIA,EAAIxB,KAAOQ,EAAOG,QAAQc,WAA1B,2BAC/BD,GAD+B,IAElCtB,OAAQM,EAAOG,QAAQkB,YACvBL,OAEZ,IIxD8B,+BJyD1B,OAAO,2BACAjB,GADP,IAEIT,iBAAkBU,EAAOG,QAAQb,mBAEzC,QACI,OAAOS,M,QK5DNuB,EAAiB,kBAAMC,eAEvBC,EAAQC,YAAYC,GCNpBC,G,MAAoB,SAAC5B,GAAD,OAA0BA,EAAMgB,Y,kCCSpDa,EAA8CC,IAAMC,MAAK,YAI3D,IAFHrC,EAEE,EAFFA,MAAOa,EAEL,EAFKA,WAAYE,EAEjB,EAFiBA,OACnBuB,EACE,EADFA,4BAA6BC,EAC3B,EAD2BA,wBAEjCC,QAAQC,IAAI,wBACZ,MAAgCC,oBAAkB,GAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,mBAAiB1C,GAArD,mBAAO6C,EAAP,KAAmBC,EAAnB,KAGMC,EAAmB,WACrBT,GAA+BA,EAA4BO,EAAYhC,GACvE0B,GAA2BxB,GAAUwB,EAAwBxB,EAAQ8B,EAAYhC,GACjF+B,GAAY,IAShB,OAAOD,EACD,kBAACK,EAAA,EAAD,CACEC,MAAQJ,EACRK,WAAS,EACTC,SAXiB,SAACC,GAAD,OACrBN,EAAcM,EAAMC,cAAcJ,QAW9BK,WAT2B,SAACF,GACd,UAAdA,EAAMG,KAAiBR,KASvBS,OAAST,IAEX,0BACEU,cAtBiB,kBAAMb,GAAY,KAuBpCC,M,2BC3BEa,EAAwCtB,IAAMC,MAAK,YAMrD,IAJHtB,EAIE,EAJFA,OAAQF,EAIN,EAJMA,WACRb,EAGE,EAHFA,MAAOI,EAGL,EAHKA,OACPuD,EAEE,EAFFA,mBAAoBC,EAElB,EAFkBA,uBACpBrB,EACE,EADFA,wBAEJC,QAAQC,IAAI,mBACZ,IAAMoB,EAAqBC,uBAAY,SAACC,GAAD,OACnCH,EAAuB7C,EAASgD,EAAEV,cAAmCW,QAASnD,KAAa,CAAC+C,EAAwB/C,IAClHoD,EAAaH,uBAAY,kBAC3BH,EAAmB5C,EAAQF,KAAa,CAAC8C,EAAoB5C,EAAQF,IAEzE,OACI,yBAAKqD,UAAYC,IAAEC,UACf,kBAACC,EAAA,EAAD,CAAYC,QAAUL,GAClB,kBAACM,EAAA,EAAD,OAEJ,yBAAKL,UAAYC,IAAEK,WACf,kBAACC,EAAA,EAAD,CACIC,MAAQ,UACRV,QAAU5D,EACV+C,SAAWU,IAEf,0BAAMK,UAAY9D,EAAS+D,IAAEQ,KAAOR,IAAES,QAClC,kBAACzC,EAAD,CACInC,MAAQA,EACRe,OAASA,EACTF,WAAaA,EACb0B,wBAA0BA,U,SChCrCsC,EAA0CzC,IAAMC,MAAK,YAKvD,IAHHY,EAGE,EAHFA,MAAO6B,EAGL,EAHKA,4BACPjE,EAEE,EAFFA,WAAYkE,EAEV,EAFUA,gBACZC,EACE,EADFA,oBAAqBC,EACnB,EADmBA,wBAEzBzC,QAAQC,IAAI,sBACZ,MAA0BC,mBAAiB,IAA3C,mBAAOwC,EAAP,KAAcC,EAAd,KAaMC,EAAa,kBAAMnC,EAAMoC,OAAOC,QALlCR,GAA+BA,EAA4B,IAC3DG,GAA2BpE,GAAcoE,EAAwB,GAAIpE,GACrEkE,GAAmBlE,GAAckE,EAAgB9B,EAAOpC,QACxDmE,GAAuBA,EAAoB/B,MAR3CkC,GAAS,iBAAM,uBACfL,GAA+BA,EAA4B,SAC3DG,GAA2BpE,GAAcoE,EAAwB,GAAIpE,MAmBzE,OACI,oCACI,6BACI,kBAACmC,EAAA,EAAD,CACIC,MAAQA,EACRsC,QAAU,WACVL,QAAUA,EACV/B,SAjBM,SAACC,GAA0C,IAAD,EAC5D8B,GAASC,GAAS,iBAAM,MACxB,IAAMlC,EAAK,UAAGG,EAAMC,qBAAT,aAAG,EAAqBJ,MACnC6B,GAA+BA,EAA4B7B,GAC3DgC,GAA2BpE,GAAcoE,EAAwBhC,EAAOpC,IAc5DyC,WAZQ,SAACF,GACH,UAAdA,EAAMG,KAAiB6B,KAYfI,WAAaN,EACbO,MAAQ,UAEZ,kBAACpB,EAAA,EAAD,CACIK,MAAQ,UACRJ,QAAUc,GAEV,kBAACM,EAAA,EAAD,Y,0BC1DPC,EAAgB,SAACrF,GAAD,OAA0BA,EAAMH,OCFhDyF,EAAM,kBACNC,EAAS,qBACTC,EAAY,wBACZC,EAAiB,8BCsBjBC,EAAwC5D,IAAMC,MAAK,YAMrD,IAJHxB,EAIE,EAJFA,WAAYZ,EAIV,EAJUA,OAAQD,EAIlB,EAJkBA,MACpB2D,EAGE,EAHFA,mBAAoBoB,EAGlB,EAHkBA,gBACpBzC,EAEE,EAFFA,4BACAC,EACE,EADFA,wBAEJC,QAAQC,IAAR,0BAAgC5B,IAChC,IAAMoF,EAAWpE,IACjB,EAAgCqE,YAAYP,GAAgB9E,GAApDX,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,MAChBgG,EAAeC,mBAAQ,kBC9BA,SAAC9F,EAAyBC,GACvD,OAAQA,EAAOC,MACX,KAAK6F,EACD,OAAO/F,EACX,KAAK+F,EACD,OAAO/F,EAAML,QAAO,SAAAe,GAAI,OAAKA,EAAKZ,UACtC,KAAKiG,EACD,OAAO/F,EAAML,QAAO,SAAAe,GAAI,OAAIA,EAAKZ,UACrC,QACI,OAAOE,GDsBXgG,CAAkBnG,EE9B+C,CACrEK,KAAM6F,EF6BgEpG,OAAU,CAACE,IAE3EoG,EAAezC,uBAAY,SAACV,GAC9B,IAAMH,EAAQG,EAAMC,cAAcmD,UAClCP,EGJiF,CACrFzF,KXlCkC,mCWmClCE,QAAS,CACLc,WHC+CX,EGA/Ce,UHA2DqB,OAC5D,CAACpC,IACE+C,EAAyBE,uBAAY,SAAC/C,EAAgB0F,EAAiB5F,GACzEoF,EIUoB,SAAClF,EAAgBX,EAAiBS,GAAlC,MAA0D,CAClFL,Kb/CyB,sBagDzBE,QAAS,CACLK,SACAX,SACAS,eJfS6F,CAA0B3F,EAAQ0F,EAAQ5F,MACpD,CAACA,IACEoE,EAA0BnB,uBAAY,SAAC5D,EAAsBW,GAAvB,OACxCoF,EIgBuB,SAAC/F,EAAsBW,GAAvB,MAA+C,CAC1EL,KbtD8B,2BauD9BE,QAAS,CAAER,eAAcW,eJlBZ6F,CAA6BxG,EAAcW,MAAc,CAACX,EAAcW,IAC/E8F,EAAiB7C,uBAAY,WAC/BmC,EGpC+C,CACnDzF,KXb2B,4BWc3BE,QAAS,CACLc,WHiCyCX,KACzCoF,EIZkD,CACtDzF,KblC8B,2BamC9BE,QAAS,CACLO,YJSuCJ,OACxC,CAACA,IAEE+F,EAAcR,mBAAQ,kBAAMD,EAAa9E,KAAI,SAACL,GAAD,OAC/C,kBAAC0C,EAAD,CACIH,IAAMvC,EAAKjB,GACXgB,OAASC,EAAKjB,GACdc,WAAaA,EACbb,MAAQgB,EAAKhB,MACbI,OAASY,EAAKZ,OACduD,mBAAqBA,EACrBC,uBAAyBA,EACzBrB,wBAA0BA,SAE9B,CAACpC,EAAOF,IAEZ,OACI,kBAAC4G,EAAA,EAAD,CAAMC,MAAI,GACN,kBAACC,EAAA,EAAD,CAAOC,MAAQ,CAAEC,QAAS,SACtB,4BACI,kBAAC5C,EAAA,EAAD,CAAY6C,SAAWrG,EAAayD,QAAUqC,GAC1C,kBAACpC,EAAA,EAAD,OAEJ,kBAACpC,EAAD,CACInC,MAAQA,EACRa,WAAaA,EACbyB,4BAA8BA,KAGtC,kBAACuC,EAAD,CACI5B,MAAQ/C,EACRW,WAAaA,EACboE,wBAA0BA,EAC1BF,gBAAkBA,IAEpB6B,EACF,6BACI,kBAACO,EAAA,EAAD,CACIC,KAAO,QACP9C,QAAUiC,EACVhB,QAAU,YACVb,MAAmB,QAAXzE,EAAmB,UAAY,WAJ3C,OAOA,kBAACkH,EAAA,EAAD,CACIC,KAAO,QACP9C,QAAUiC,EACVhB,QAAU,YACVb,MAAmB,WAAXzE,EAAsB,UAAY,WAJ9C,UAOA,kBAACkH,EAAA,EAAD,CACIC,KAAO,QACP9C,QAAUiC,EACVhB,QAAU,YACVb,MAAmB,cAAXzE,EAAyB,UAAY,WAJjD,mB,8DKvFPoH,EAAMjF,IAAMC,MAAK,WAC1BG,QAAQC,IAAI,cACZ,MAAwCyD,YAAYhE,GAA5CpC,EAAR,EAAQA,UAAWD,EAAnB,EAAmBA,iBACboG,EAAWpE,IACXU,EAA0BuB,uBAAY,SAAC/C,EAAgBf,EAAea,GAAhC,OACxCoF,ED0BuB,SAAClF,EAAgBK,EAAkBP,GAAnC,MAA2D,CACtFL,KbvC6B,0BawC7BE,QAAS,CACLK,SACAK,WACAP,eC/BS6F,CAA6B3F,EAAQf,EAAOa,MAAc,IACjE8C,EAAqBG,uBAAY,SAAC/C,EAAgBF,GAAjB,OACnCoF,EDSkB,SAAClF,EAAgBF,GAAjB,MAAyC,CAC/DL,Kb3BuB,oBa4BvBE,QAAS,CACLK,SACAF,eCbS6F,CAAwB3F,EAAQF,MAAc,IACrDkE,EAAkBjB,uBAAY,SAAC9D,EAAea,GAAhB,OAChCoF,EDHe,SAAC/F,EAAsBW,GAAvB,MAA+C,CAClEL,KbnBoB,iBaoBpBE,QAAS,CACLC,UAAWjB,cACXQ,eACAU,eAAe,EACfC,eCHS6F,CAAqB1G,EAAOa,MAAc,IAEjDmE,EAAsBlB,uBAAY,SAAC9D,GACrC,IAAMS,EAAgBf,cACtBuG,EFPyE,CAC7EzF,KXnBwB,yBWoBxBE,QAAS,CACLe,cEI6ChB,EFH7CiB,iBEGsC1B,EFFtC2B,kBAAmB,SEGnBsE,EDbyB,SAACxF,GAAD,MAA4B,CACzDD,KbfgC,4BagBhCE,QAAS,CAAED,kBCWEiG,CAA+BjG,MACzC,IACG6B,EAA8BwB,uBAAY,SAAC9D,EAAea,GAAhB,OAC5CoF,EFF8E,CAClFzF,KX3BiC,kCW4BjCE,QAAS,CACLc,WED8CX,EFE9Ca,iBEF0D1B,OAAS,IACjEsH,EAA8BxD,uBAAY,SAACjE,GAAD,OAC5CoG,EFY2B,SAACpG,GAAD,MAA+B,CAC9DW,KXzCkC,+BW0ClCE,QAAS,CAAEb,qBEdE0H,CAAqC1H,MAAoB,IAEhE2H,EAAiBpB,mBAAQ,kBAAMtG,EAAUuB,KAAI,SAAAE,GAC/C,OAAO,kBAACyE,EAAD,CACHnF,WAAaU,EAAIxB,GACjBwD,IAAMhC,EAAIxB,GACVE,OAASsB,EAAItB,OACbD,MAAQuB,EAAIvB,MACZ+E,gBAAkBA,EAClBpB,mBAAqBA,EACrBrB,4BAA8BA,EAC9BC,wBAA0BA,SAE9B,CAACzC,IAEL,OACI,6BACI,kBAAC2H,EAAA,EAAD,CAAQC,SAAW,UACf,kBAACC,EAAA,EAAD,KACI,kBAACtD,EAAA,EAAD,CACIuD,KAAO,QACPlD,MAAQ,UACRmD,aAAa,QAEb,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYxC,QAAU,MAAtB,eAGA,kBAAClB,EAAA,EAAD,CACIK,MAAQ,UACRmD,aAAa,SAEb,kBAAC,IAAD,SAIZ,kBAACG,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACpB,EAAA,EAAD,CAAMrC,WAAS,EAACwC,MAAQ,CAAEC,QAAS,SAC/B,kBAACpC,EAAD,CACI5B,MAAQpD,EACRiF,4BAA8BwC,EAC9BtC,oBAAsBA,KAG9B,kBAAC6B,EAAA,EAAD,CAAMrC,WAAS,EAAC0D,QAAU,GACpBV,QClEFW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAD,CAAU1G,MAAQA,GACd,kBAACsF,EAAD,OAAmBqB,SAASC,eAAe,SDiI7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhE,GACL1C,QAAQ0C,MAAMA,EAAMiE,c","file":"static/js/main.f35f8d46.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ToDoItem_listItem__3EoOg\",\"done\":\"ToDoItem_done__fY9eC\",\"undone\":\"ToDoItem_undone__3LgIO\",\"container\":\"ToDoItem_container__ofRBV\"};","import * as types from '../types/todoLists'\nimport { v1 } from 'uuid'\nimport { ActionTodoListsType } from '../actions/todoLists'\nimport { FilterPropTypes } from './taskFilter'\n\nexport const toDoListId1 = v1()\nexport const toDoListId2 = v1()\n\nexport type ToDoListTypes = {\n    id: string\n    title: string\n    filter: FilterPropTypes\n}\n\ntype TodoListStateType = {\n    newTodoListTitle: string\n    todoLists: ToDoListTypes[]\n}\n\nconst initialState: TodoListStateType = {\n    newTodoListTitle: '',\n    todoLists: [\n        { id: toDoListId1, title: 'What to learn', filter: 'ALL' },\n        { id: toDoListId2, title: 'What to buy', filter: 'ALL' },\n    ],\n}\n\nexport const todolistsReducer = (state = initialState, action: ActionTodoListsType): TodoListStateType => {\n    switch (action.type) {\n        case types.REMOVE_TODOLIST:\n            return {\n                ...state,\n                todoLists: state.todoLists.filter(tdl => tdl.id !== action.payload.todolistId),\n            }\n        case types.ADD_TODOLIST:\n            return {\n                ...state,\n                todoLists: [\n                    ...state.todoLists,\n                    {\n                        id: action.payload.newTodolistId,\n                        title: action.payload.newTodolistTitle,\n                        filter: action.payload.newTodolistFilter,\n                    },\n                ],\n            }\n        case types.CHANGE_TODOLIST_TITLE:\n            return {\n                ...state,\n                todoLists: state.todoLists.map(tdl => tdl.id === action.payload.todolistId ?\n                    { ...tdl, title: action.payload.newTodolistTitle } : tdl),\n            }\n        case types.CHANGE_TODOLIST_FILTER:\n            return {\n                ...state,\n                todoLists: state.todoLists.map(tdl => tdl.id === action.payload.todolistId ? {\n                    ...tdl,\n                    filter: action.payload.newFilter,\n                } : tdl),\n            }\n        case types.SET_NEW_TODOLIST_TITLE:\n            return {\n                ...state,\n                newTodoListTitle: action.payload.newTodoListTitle,\n            }\n        default:\n            return state\n    }\n}","import * as types from '../types/tasks'\nimport clone from 'clone-deep'\nimport { toDoListId1, toDoListId2 } from './todoLists'\nimport { ActionsTasksType } from '../actions/tasks'\nimport { v1 } from 'uuid'\n\nexport type TaskTypes = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport type TasksType = {\n    newTaskTitle: string\n    tasks: TaskTypes[]\n}\nexport type TasksStateTypes = {\n    [ key: string ]: TasksType\n}\n\nconst initialState: TasksStateTypes = {\n    [ toDoListId1 ]: {\n        newTaskTitle: '',\n        tasks:\n            [\n                { id: v1(), title: 'HTML&CSS', isDone: true },\n                { id: v1(), title: 'JS', isDone: true },\n                { id: v1(), title: 'ReactJS', isDone: false },\n            ],\n    },\n    [ toDoListId2 ]: {\n        newTaskTitle: '',\n        tasks: [\n            { id: v1(), title: 'Beer', isDone: true },\n            { id: v1(), title: 'Meat', isDone: true },\n            { id: v1(), title: 'Pork', isDone: false },\n        ],\n    },\n}\n\nexport const tasksReducer = (state = initialState, action: ActionsTasksType): TasksStateTypes => {\n    switch (action.type) {\n        case types.ADD_NEW_TASKS_OBJECT: {\n            const { newToDoListId } = action.payload\n            return {\n                ...state,\n                [ newToDoListId ]: {\n                    newTaskTitle: '',\n                    tasks: [],\n                },\n            }\n        }\n        case types.ADD_TASK: {\n            const { newTaskTitle, newTaskId, newTaskIsDone, toDoListId } = action.payload\n            const newTask: TaskTypes = {\n                id: newTaskId,\n                title: newTaskTitle,\n                isDone: newTaskIsDone,\n            }\n            return {\n                ...state,\n                [ toDoListId ]: {\n                    ...state[ toDoListId ],\n                    tasks: [\n                        newTask,\n                        ...state[ toDoListId ].tasks,\n                    ],\n                },\n            }\n        }\n        case types.REMOVE_TASK: {\n            const { toDoListId, taskId } = action.payload\n            return {\n                ...state,\n                [ toDoListId ]: {\n                    ...state[ toDoListId ],\n                    tasks: state[ toDoListId ].tasks.filter(task => task.id !== taskId),\n                },\n            }\n        }\n        case types.REMOVE_TASKS_ARRAY: {\n            const { toDoListsId } = action.payload\n            const cloneState = clone(state)\n            delete cloneState[ toDoListsId ]\n            return { ...cloneState }\n        }\n        case types.CHANGE_TASK_TITLE: {\n            const { toDoListId, taskId, newTitle } = action.payload\n            return {\n                ...state,\n                [ toDoListId ]: {\n                    ...state[ toDoListId ],\n                    tasks: state[ toDoListId ].tasks.map(task => task.id === taskId ? {\n                        ...task,\n                        title: newTitle,\n                    } : task),\n                },\n            }\n        }\n        case types.CHANGE_SELECT: {\n            const { toDoListId, taskId, isDone } = action.payload\n            return {\n                ...state,\n                [ toDoListId ]: {\n                    ...state[ toDoListId ],\n                    tasks: state[ toDoListId ].tasks.map(task => task.id === taskId ? { ...task, isDone } : task),\n                },\n            }\n        }\n        case types.SET_NEW_TASK_TITLE: {\n            const { newTaskTitle, toDoListId } = action.payload\n            return {\n                ...state,\n                [ toDoListId ]: {\n                    ...state[ toDoListId ],\n                    newTaskTitle: newTaskTitle,\n                },\n            }\n        }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport { tasksReducer } from './tasks'\nimport { todolistsReducer } from './todoLists'\n\nexport default combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n})","export const ADD_NEW_TASKS_OBJECT = 'TASKS/ADD-NEW-TASKS-ARRAY'\nexport const ADD_TASK = 'TASKS/ADD-TASK'\n\nexport const REMOVE_TASK = 'TASKS/REMOVE-TASK'\nexport const REMOVE_TASKS_ARRAY = 'TASKS/REMOVE-TASKS-ARRAY'\n\nexport const CHANGE_TASK_TITLE = 'TASKS/CHANGE-TASK-TITLE'\nexport const CHANGE_SELECT = 'TASKS/CHANGE-SELECT'\n\nexport const SET_NEW_TASK_TITLE = 'TASKS/SET-NEW-TASK-TITLE'","export const REMOVE_TODOLIST = 'TODOLISTS/REMOVE-TODOLIST'\nexport const ADD_TODOLIST = 'TODOLISTS/ADD-TODOLIST'\nexport const CHANGE_TODOLIST_TITLE = 'TODOLISTS/CHANGE-TODOLIST-TITLE'\nexport const CHANGE_TODOLIST_FILTER = 'TODOLISTS/CHANGE-TODOLIST-FILTER'\nexport const SET_NEW_TODOLIST_TITLE = 'TODOLISTS/SET-TODOLIST-TITLE'","import { createStore } from 'redux'\nimport rootReducers from './reducers'\nimport { useDispatch } from 'react-redux'\n\nexport type RootStateType = ReturnType<typeof store.getState>\nexport type AppDispatchType = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\n\nexport const store = createStore(rootReducers)","import { RootStateType } from '../index'\n\nexport const todoListsSelector = (state: RootStateType) => state.todolists","import React, { ChangeEvent, KeyboardEvent, useCallback, useState } from 'react'\nimport { TextField } from '@material-ui/core'\n\ntype EditableTitleTypes = {\n    title: string\n    taskId?: string\n    toDoListId: string\n    changeToDoListTitleCallback?: (title: string, toDoListId: string) => void\n    changeTaskTitleCallback?: (taskId: string, title: string, toDoListId: string) => void\n}\n\nexport const EditableTitle: React.FC<EditableTitleTypes> = React.memo((\n    {\n        title, toDoListId, taskId,\n        changeToDoListTitleCallback, changeTaskTitleCallback,\n    }) => {\n    console.log('EditableTitle called')\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [localTitle, setLocalTitle] = useState<string>(title)\n\n    const activateEditMode = () => setEditMode(true)\n    const activateViewMode = () => {\n        changeToDoListTitleCallback && changeToDoListTitleCallback(localTitle, toDoListId)\n        changeTaskTitleCallback && taskId && changeTaskTitleCallback(taskId, localTitle, toDoListId)\n        setEditMode(false)\n    }\n    const changeLocalTitle = (event: ChangeEvent<HTMLInputElement>) =>\n        setLocalTitle(event.currentTarget.value)\n\n    const onKeyPressActivateViewMode = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') activateViewMode()\n    }\n\n    return editMode\n        ? <TextField\n            value={ localTitle }\n            autoFocus\n            onChange={ changeLocalTitle }\n            onKeyPress={ onKeyPressActivateViewMode }\n            onBlur={ activateViewMode }\n        />\n        : <span\n            onDoubleClick={ activateEditMode }\n        >{ localTitle }</span>\n})","import React, { ChangeEvent, useCallback } from 'react'\nimport s from './ToDoItem.module.css'\nimport { EditableTitle } from '../EditableTitle/EditableTitle'\nimport { Checkbox, IconButton } from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\n\ntype ToDoItemPropTypes = {\n    taskId: string\n    toDoListId: string\n    title: string\n    isDone: boolean\n    deleteTaskCallback: (taskId: string, toDoListId: string) => void\n    changeSelectedCallback: (taskId: string, select: boolean, toDoListId: string) => void\n    changeTaskTitleCallback: (taskId: string, title: string, toDoListId: string) => void\n}\n\nexport const ToDoItem: React.FC<ToDoItemPropTypes> = React.memo((\n    {\n        taskId, toDoListId,\n        title, isDone,\n        deleteTaskCallback, changeSelectedCallback,\n        changeTaskTitleCallback,\n    }) => {\n    console.log('ToDoItem called')\n    const onChangeTaskStatus = useCallback((e: ChangeEvent) =>\n        changeSelectedCallback(taskId, (e.currentTarget as HTMLInputElement).checked, toDoListId), [changeSelectedCallback, toDoListId])\n    const deleteTask = useCallback(() =>\n        deleteTaskCallback(taskId, toDoListId), [deleteTaskCallback, taskId, toDoListId])\n\n    return (\n        <div className={ s.listItem }>\n            <IconButton onClick={ deleteTask }>\n                <Delete/>\n            </IconButton>\n            <div className={ s.container }>\n                <Checkbox\n                    color={ 'primary' }\n                    checked={ isDone }\n                    onChange={ onChangeTaskStatus }\n                />\n                <span className={ isDone ? s.done : s.undone }>\n                    <EditableTitle\n                        title={ title }\n                        taskId={ taskId }\n                        toDoListId={ toDoListId }\n                        changeTaskTitleCallback={ changeTaskTitleCallback }\n                    />\n                </span>\n            </div>\n        </div>\n    )\n})","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\nimport { IconButton, TextField } from '@material-ui/core'\nimport { AddBox } from '@material-ui/icons'\n\nexport type AddItemFormTypes = {\n    value: string\n    setNewToDoListTitleCallback?: (value: string) => void\n    toDoListId?: string\n    setNewTaskTitleCallback?: (newTaskTitle: string, toDoListId: string) => void\n    addTaskCallback?: (title: string, toDoListId: string) => void\n    addToDoListCallback?: (title: string) => void\n}\n\nexport const AddItemForm: React.FC<AddItemFormTypes> = React.memo((\n    {\n        value, setNewToDoListTitleCallback,\n        toDoListId, addTaskCallback,\n        addToDoListCallback, setNewTaskTitleCallback,\n    }) => {\n    console.log('AddItemForm called')\n    const [error, setError] = useState<string>('')\n\n    const addError = () => {\n        setError(() => 'Title is required')\n        setNewToDoListTitleCallback && setNewToDoListTitleCallback('')\n        setNewTaskTitleCallback && toDoListId && setNewTaskTitleCallback('', toDoListId)\n    }\n    const addNewValue = () => {\n        setNewToDoListTitleCallback && setNewToDoListTitleCallback('')\n        setNewTaskTitleCallback && toDoListId && setNewTaskTitleCallback('', toDoListId)\n        addTaskCallback && toDoListId && addTaskCallback(value, toDoListId)\n        addToDoListCallback && addToDoListCallback(value)\n    }\n    const onAddValue = () => value.trim().length ? addNewValue() : addError()\n    const onChangeValue = (event: ChangeEvent<HTMLInputElement>) => {\n        error && setError(() => '')\n        const value = event.currentTarget?.value\n        setNewToDoListTitleCallback && setNewToDoListTitleCallback(value)\n        setNewTaskTitleCallback && toDoListId && setNewTaskTitleCallback(value, toDoListId)\n    }\n    const onKeyPressValue = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') onAddValue()\n    }\n\n    return (\n        <>\n            <div>\n                <TextField\n                    value={ value }\n                    variant={ 'outlined' }\n                    error={ !!error }\n                    onChange={ onChangeValue }\n                    onKeyPress={ onKeyPressValue }\n                    helperText={ error }\n                    label={ 'Title' }\n                />\n                <IconButton\n                    color={ 'primary' }\n                    onClick={ onAddValue }\n                >\n                    <AddBox/>\n                </IconButton>\n            </div>\n        </>\n    )\n})","import { RootStateType } from '../index'\n\nexport const tasksSelector = (state: RootStateType) => state.tasks","export const ALL = 'TASK_FILTER/ALL'\nexport const ACTIVE = 'TASK_FILTER/ACTIVE'\nexport const COMPLETED = 'TASK_FILTER/COMPLETED'\nexport const SET_TASK_ARRAY = 'TASK_FILTER/SET_TASKS_ARRAY'","import React, { MouseEvent, useCallback, useMemo } from 'react'\nimport { ToDoItem } from '../ToDoItem/ToDoItem'\nimport { AddItemForm } from '../AddItemForm/AddItemForm'\nimport { EditableTitle } from '../EditableTitle/EditableTitle'\nimport { Button, Grid, IconButton, Paper } from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport { useAppDispatch } from '../../state'\nimport * as todolistsActions from '../../state/actions/todoLists'\nimport * as tasksActions from '../../state/actions/tasks'\nimport { FilterPropTypes } from '../../state/reducers/taskFilter'\nimport { useSelector } from 'react-redux'\nimport { tasksSelector } from '../../state/selectors/tasks'\nimport * as taskFilterActions from '../../state/actions/taskFilter'\nimport { taskFilterReducer } from '../../state/reducers/taskFilter'\n\nexport type ToDoListPropTypes = {\n    toDoListId: string\n    filter: FilterPropTypes\n    title: string\n    addTaskCallback: (title: string, toDoListId: string) => void\n    deleteTaskCallback: (taskId: string, toDoListId: string) => void\n    changeToDoListTitleCallback: (title: string, toDoListId: string) => void\n    changeTaskTitleCallback: (taskId: string, title: string, toDoListId: string) => void\n}\n\nexport const ToDoList: React.FC<ToDoListPropTypes> = React.memo((\n    {\n        toDoListId, filter, title,\n        deleteTaskCallback, addTaskCallback,\n        changeToDoListTitleCallback,\n        changeTaskTitleCallback,\n    }) => {\n    console.log(`ToDoList called ${ toDoListId }`)\n    const dispatch = useAppDispatch()\n    const { newTaskTitle, tasks } = useSelector(tasksSelector)[ toDoListId ]\n    const filteredTask = useMemo(() =>\n        taskFilterReducer(tasks, taskFilterActions.changeTasksArrayFilter(filter)), [tasks])\n\n    const changeFilter = useCallback((event: MouseEvent<HTMLButtonElement>) => {\n        const value = event.currentTarget.innerText\n        dispatch(todolistsActions.changeTodoListFilter(toDoListId, value as FilterPropTypes))\n    }, [toDoListId])\n    const changeSelectedCallback = useCallback((taskId: string, select: boolean, toDoListId: string) => {\n        dispatch(tasksActions.changeSelect(taskId, select, toDoListId))\n    }, [toDoListId])\n    const setNewTaskTitleCallback = useCallback((newTaskTitle: string, toDoListId: string) =>\n        dispatch(tasksActions.setNewTaskTitle(newTaskTitle, toDoListId)), [newTaskTitle, toDoListId])\n    const deleteToDoList = useCallback(() => {\n        dispatch(todolistsActions.removeTodoList(toDoListId))\n        dispatch(tasksActions.removeTasksArray(toDoListId))\n    }, [toDoListId])\n\n    const mappedTasks = useMemo(() => filteredTask.map((task) => (\n        <ToDoItem\n            key={ task.id }\n            taskId={ task.id }\n            toDoListId={ toDoListId }\n            title={ task.title }\n            isDone={ task.isDone }\n            deleteTaskCallback={ deleteTaskCallback }\n            changeSelectedCallback={ changeSelectedCallback }\n            changeTaskTitleCallback={ changeTaskTitleCallback }\n        />\n    )), [tasks, filter])\n\n    return (\n        <Grid item>\n            <Paper style={ { padding: '10px' } }>\n                <h3>\n                    <IconButton tabIndex={ toDoListId } onClick={ deleteToDoList }>\n                        <Delete/>\n                    </IconButton>\n                    <EditableTitle\n                        title={ title }\n                        toDoListId={ toDoListId }\n                        changeToDoListTitleCallback={ changeToDoListTitleCallback }\n                    />\n                </h3>\n                <AddItemForm\n                    value={ newTaskTitle }\n                    toDoListId={ toDoListId }\n                    setNewTaskTitleCallback={ setNewTaskTitleCallback }\n                    addTaskCallback={ addTaskCallback }\n                />\n                { mappedTasks }\n                <div>\n                    <Button\n                        size={ 'small' }\n                        onClick={ changeFilter }\n                        variant={ 'contained' }\n                        color={ filter === 'ALL' ? 'primary' : 'default' }\n                    >All\n                    </Button>\n                    <Button\n                        size={ 'small' }\n                        onClick={ changeFilter }\n                        variant={ 'contained' }\n                        color={ filter === 'ACTIVE' ? 'primary' : 'default' }\n                    >Active\n                    </Button>\n                    <Button\n                        size={ 'small' }\n                        onClick={ changeFilter }\n                        variant={ 'contained' }\n                        color={ filter === 'COMPLETED' ? 'primary' : 'default' }\n                    >Completed\n                    </Button>\n                </div>\n            </Paper>\n        </Grid>\n    )\n})","import * as types from '../types/taskFilter'\nimport { TaskTypes } from './tasks'\nimport { ActionTaskFilterType } from '../actions/taskFilter'\n\nexport type FilterPropTypes = 'ALL' | 'ACTIVE' | 'COMPLETED'\nexport const taskFilterReducer = (state: TaskTypes[] | [], action: ActionTaskFilterType): TaskTypes[] => {\n    switch (action.type) {\n        case types.ALL:\n            return state\n        case types.ACTIVE:\n            return state.filter(task => !task.isDone)\n        case types.COMPLETED:\n            return state.filter(task => task.isDone)\n        default:\n            return state\n    }\n}","import * as types from '../types/taskFilter'\nimport { FilterPropTypes } from '../reducers/taskFilter'\n\ntype ChangeTasksArrayFilterType = ReturnType<typeof changeTasksArrayFilter>\nexport type ActionTaskFilterType = ChangeTasksArrayFilterType\n\nexport const changeTasksArrayFilter = (filterValue: FilterPropTypes) => ({\n    type: types[ filterValue ],\n} as const)","import * as types from '../types/todoLists'\nimport { FilterPropTypes } from '../reducers/taskFilter'\n\ntype RemoveTodosType = ReturnType<typeof removeTodoList>\ntype AddTodosType = ReturnType<typeof addTodoList>\ntype ChangeTodosTitleType = ReturnType<typeof changeTodoListTitle>\ntype ChangeTodosFilterType = ReturnType<typeof changeTodoListFilter>\ntype SetNewTodoListTitleType = ReturnType<typeof setNewTodoListTitle>\nexport type ActionTodoListsType =\n    RemoveTodosType | AddTodosType | ChangeTodosTitleType\n    | ChangeTodosFilterType | SetNewTodoListTitleType\n\nexport const removeTodoList = (todolistId: string) => ({\n    type: types.REMOVE_TODOLIST,\n    payload: {\n        todolistId,\n    },\n} as const)\n\nexport const addTodoList = (newTodolistTitle: string, newTodolistId: string) => ({\n    type: types.ADD_TODOLIST,\n    payload: {\n        newTodolistId,\n        newTodolistTitle,\n        newTodolistFilter: 'ALL',\n    },\n} as const)\n\nexport const changeTodoListTitle = (todolistId: string, newTodolistTitle: string) => ({\n    type: types.CHANGE_TODOLIST_TITLE,\n    payload: {\n        todolistId,\n        newTodolistTitle,\n    },\n} as const)\n\nexport const changeTodoListFilter = (todolistId: string, newFilter: FilterPropTypes) => ({\n    type: types.CHANGE_TODOLIST_FILTER,\n    payload: {\n        todolistId,\n        newFilter,\n    },\n} as const)\n\nexport const setNewTodoListTitle = (newTodoListTitle: string) => ({\n    type: types.SET_NEW_TODOLIST_TITLE,\n    payload: { newTodoListTitle },\n} as const)","import * as types from '../types/tasks'\nimport { v1 } from 'uuid'\n\ntype AddNewTasksObjectType = ReturnType<typeof addNewTasksObject>\ntype AddTaskType = ReturnType<typeof addTask>\ntype RemoveTaskType = ReturnType<typeof removeTask>\ntype RemoveTasksArrayType = ReturnType<typeof removeTasksArray>\ntype ChangeTaskTitleType = ReturnType<typeof changeTaskTitle>\ntype ChangeSelectType = ReturnType<typeof changeSelect>\ntype SetNewTaskTitleType = ReturnType<typeof setNewTaskTitle>\n\nexport type ActionsTasksType = AddNewTasksObjectType | AddTaskType | RemoveTaskType |\n    RemoveTasksArrayType | ChangeTaskTitleType | ChangeSelectType | SetNewTaskTitleType\n\nexport const addNewTasksObject = (newToDoListId: string) => ({\n    type: types.ADD_NEW_TASKS_OBJECT,\n    payload: { newToDoListId },\n} as const)\n\nexport const addTask = (newTaskTitle: string, toDoListId: string) => ({\n    type: types.ADD_TASK,\n    payload: {\n        newTaskId: v1(),\n        newTaskTitle,\n        newTaskIsDone: false,\n        toDoListId,\n    },\n} as const)\n\nexport const removeTask = (taskId: string, toDoListId: string) => ({\n    type: types.REMOVE_TASK,\n    payload: {\n        taskId,\n        toDoListId,\n    },\n} as const)\n\nexport const removeTasksArray = (toDoListsId: string) => ({\n    type: types.REMOVE_TASKS_ARRAY,\n    payload: {\n        toDoListsId,\n    },\n} as const)\n\nexport const changeTaskTitle = (taskId: string, newTitle: string, toDoListId: string) => ({\n    type: types.CHANGE_TASK_TITLE,\n    payload: {\n        taskId,\n        newTitle,\n        toDoListId,\n    },\n} as const)\n\nexport const changeSelect = (taskId: string, isDone: boolean, toDoListId: string) => ({\n    type: types.CHANGE_SELECT,\n    payload: {\n        taskId,\n        isDone,\n        toDoListId,\n    },\n} as const)\n\nexport const setNewTaskTitle = (newTaskTitle: string, toDoListId: string) => ({\n    type: types.SET_NEW_TASK_TITLE,\n    payload: { newTaskTitle, toDoListId },\n} as const)","import React, { useCallback, useMemo } from 'react'\r\nimport { v1 } from 'uuid'\r\nimport * as todolistsActions from './state/actions/todoLists'\r\nimport * as tasksActions from './state/actions/tasks'\r\nimport { todoListsSelector } from './state/selectors/todoLists'\r\nimport { ToDoList } from './components/ToDoList/ToDoList'\r\nimport { AddItemForm } from './components/AddItemForm/AddItemForm'\r\nimport { AppBar, Container, Grid, IconButton, Toolbar, Typography } from '@material-ui/core'\r\nimport { Menu } from '@material-ui/icons'\r\nimport AccountCircle from '@material-ui/icons/AccountCircle'\r\nimport { useAppDispatch } from './state'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const App = React.memo(() => {\r\n    console.log('App called')\r\n    const { todoLists, newTodoListTitle } = useSelector(todoListsSelector)\r\n    const dispatch = useAppDispatch()\r\n    const changeTaskTitleCallback = useCallback((taskId: string, title: string, toDoListId: string) =>\r\n        dispatch(tasksActions.changeTaskTitle(taskId, title, toDoListId)), [])\r\n    const deleteTaskCallback = useCallback((taskId: string, toDoListId: string) =>\r\n        dispatch(tasksActions.removeTask(taskId, toDoListId)), [])\r\n    const addTaskCallback = useCallback((title: string, toDoListId: string) =>\r\n        dispatch(tasksActions.addTask(title, toDoListId)), [])\r\n\r\n    const addToDoListCallback = useCallback((title: string) => {\r\n        const newToDoListId = v1()\r\n        dispatch(todolistsActions.addTodoList(title, newToDoListId))\r\n        dispatch(tasksActions.addNewTasksObject(newToDoListId))\r\n    }, [])\r\n    const changeToDoListTitleCallback = useCallback((title: string, toDoListId: string) =>\r\n        dispatch(todolistsActions.changeTodoListTitle(toDoListId, title)), [])\r\n    const setNewTodoListTitleCallback = useCallback((newTodoListTitle: string) =>\r\n        dispatch(todolistsActions.setNewTodoListTitle(newTodoListTitle)), [])\r\n\r\n    const mappedToDoList = useMemo(() => todoLists.map(tdl => {\r\n        return <ToDoList\r\n            toDoListId={ tdl.id }\r\n            key={ tdl.id }\r\n            filter={ tdl.filter }\r\n            title={ tdl.title }\r\n            addTaskCallback={ addTaskCallback }\r\n            deleteTaskCallback={ deleteTaskCallback }\r\n            changeToDoListTitleCallback={ changeToDoListTitleCallback }\r\n            changeTaskTitleCallback={ changeTaskTitleCallback }\r\n        />\r\n    }), [todoLists])\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position={ 'static' }>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge={ 'start' }\r\n                        color={ 'inherit' }\r\n                        aria-label={ 'menu' }\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={ 'h6' }>\r\n                        To Do Clone\r\n                    </Typography>\r\n                    <IconButton\r\n                        color={ 'inherit' }\r\n                        aria-label={ 'login' }\r\n                    >\r\n                        <AccountCircle/>\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={ { padding: '20px' } }>\r\n                    <AddItemForm\r\n                        value={ newTodoListTitle }\r\n                        setNewToDoListTitleCallback={ setNewTodoListTitleCallback }\r\n                        addToDoListCallback={ addToDoListCallback }\r\n                    />\r\n                </Grid>\r\n                <Grid container spacing={ 1 }>\r\n                    { mappedToDoList }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { store } from './state'\r\nimport './index.css'\r\nimport { App } from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { Provider } from 'react-redux'\r\n\r\nReactDOM.render(\r\n    <Provider store={ store }>\r\n        <App/></Provider>, document.getElementById('root'))\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}