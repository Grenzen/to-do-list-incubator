{"version":3,"sources":["components/ToDoItem/ToDoItem.module.css","state/types/taskFilter.ts","state/reducers/todolists.ts","state/types/todolists.ts","state/reducers/tasks.ts","state/types/tasks.ts","components/EditableTitle/EditableTitle.tsx","components/ToDoItem/ToDoItem.tsx","components/AddItemForm/AddItemForm.tsx","components/ToDoList/ToDoList.tsx","App.tsx","state/actions/tasks.ts","state/actions/todolists.ts","state/actions/taskFilter.ts","state/reducers/taskFilter.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","ALL","ACTIVE","COMPLETED","todolistsReducer","state","action","type","filter","tdl","id","payload","todolistId","newTodolistId","title","newTodolistTitle","newTodolistFilter","map","newFilter","Error","tasksReducer","newToDoListId","newTask","newTaskId","newTaskTitle","isDone","newTaskIsDone","toDoListId","task","taskId","cloneState","clone","toDoListsId","newTitle","EditableTitle","changeToDoListTitleCallback","changeTaskTitleCallback","useState","editMode","setEditMode","localTitle","setLocalTitle","activateViewMode","TextField","value","autoFocus","onChange","event","currentTarget","onKeyPress","key","onBlur","onDoubleClick","ToDoItem","deleteTaskCallback","changeSelectedCallback","className","s","listItem","IconButton","onClick","Delete","container","Checkbox","color","checked","e","done","undone","AddItemForm","setValueCallback","addTaskCallback","addToDoListCallback","error","setError","onAddValue","trim","length","variant","helperText","label","AddBox","ToDoList","tasks","changeFilterCallback","deleteToDoListCallback","setNewTitle","mappedTasks","changeFilter","innerText","Grid","item","Paper","style","padding","tabIndex","Button","size","App","toDoListId1","v1","toDoListId2","newToDoListTitle","setNewToDoListTitle","toDoLists","setToDoLists","setTasks","select","tasksActions","mappedToDoList","filterValue","tasksForToDoList","types","taskFilterReducer","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"8HACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,KAAO,uBAAuB,OAAS,yBAAyB,UAAY,8B,0SCDvHC,EAAM,MACNC,EAAS,SACTC,EAAY,Y,gBCSZC,EAAmB,SAACC,EAA6BC,GAC1D,OAAQA,EAAOC,MACX,ICbuB,kBDcnB,OAAOF,EAAMG,QAAO,SAAAC,GAAG,OAAIA,EAAIC,KAAOJ,EAAOK,QAAQC,cACzD,ICdoB,eDehB,MAAM,GAAN,mBACOP,GADP,CAEI,CACIK,GAAIJ,EAAOK,QAAQE,cACnBC,MAAOR,EAAOK,QAAQI,iBACtBP,OAAQF,EAAOK,QAAQK,qBAGnC,ICtB6B,wBDuBzB,OAAOX,EAAMY,KAAI,SAAAR,GAAG,OAAIA,EAAIC,KAAOJ,EAAOK,QAAQC,WAA1B,2BACfH,GADe,IACVK,MAAOR,EAAOK,QAAQI,mBAAqBN,KAC7D,ICxB8B,yBDyB1B,OAAOJ,EAAMY,KAAI,SAAAR,GAAG,OAAIA,EAAIC,KAAOJ,EAAOK,QAAQC,WAA1B,2BACjBH,GADiB,IAEpBD,OAAQF,EAAOK,QAAQO,YACvBT,KACR,QACI,MAAM,IAAIU,MAAJ,kC,iBElBLC,EAAe,SAACf,EAAuBC,GAChD,OAAQA,EAAOC,MACX,ICjB2B,sBDkBvB,OAAO,2BAAKF,GAAZ,kBAAqBC,EAAOK,QAAQU,cAAiB,KACzD,IClBgB,WDmBZ,IAAMC,EAAqB,CACvBZ,GAAIJ,EAAOK,QAAQY,UACnBT,MAAOR,EAAOK,QAAQa,aACtBC,OAAQnB,EAAOK,QAAQe,eAEnBC,EAAerB,EAAOK,QAAtBgB,WACR,OAAO,2BACAtB,GADP,kBAEMsB,EAFN,CAEqBL,GAFrB,mBAEiCjB,EAAOsB,OAE5C,IC3BmB,cD4Bf,OAAO,2BACAtB,GADP,kBAEMC,EAAOK,QAAQgB,WAActB,EAAOC,EAAOK,QAAQgB,YAChDnB,QAAO,SAAAoB,GAAI,OAAIA,EAAKlB,KAAOJ,EAAOK,QAAQkB,YAEvD,IChC0B,qBDiCtB,IAAMC,EAAaC,IAAM1B,GAEzB,cADOyB,EAAYxB,EAAOK,QAAQqB,aAC3B,eAAKF,GAChB,IClCyB,oBDmCrB,OAAO,2BACAzB,GADP,kBAEMC,EAAOK,QAAQgB,WAActB,EAAOC,EAAOK,QAAQgB,YAChDV,KAAI,SAAAW,GAAI,OAAIA,EAAKlB,KAAOJ,EAAOK,QAAQkB,OAA3B,2BACND,GADM,IAETd,MAAOR,EAAOK,QAAQsB,WACtBL,OAEhB,IC1CqB,gBD2CjB,OAAO,2BACAvB,GADP,kBAEMC,EAAOK,QAAQgB,WAActB,EAAOC,EAAOK,QAAQgB,YAChDV,KAAI,SAAAW,GAAI,OAAIA,EAAKlB,KAAOJ,EAAOK,QAAQkB,OAA3B,2BAAyCD,GAAzC,IAA+CH,OAAQnB,EAAOK,QAAQc,SAAWG,OAE1G,QACI,MAAM,IAAIT,MAAJ,yC,0BE7CLe,EAA8C,SAAC,GAIjD,IAFHpB,EAEE,EAFFA,MAAOa,EAEL,EAFKA,WAAYE,EAEjB,EAFiBA,OACnBM,EACE,EADFA,4BAA6BC,EAC3B,EAD2BA,wBAEjC,EAAgCC,oBAAkB,GAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,mBAAiBvB,GAArD,mBAAO0B,EAAP,KAAmBC,EAAnB,KAGMC,EAAmB,WACrBP,GAA+BA,EAA4BK,EAAYb,GACvES,GAA2BP,GAAUO,EAAwBP,EAAQW,EAAYb,GACjFY,GAAY,IAShB,OAAOD,EACD,kBAACK,EAAA,EAAD,CACEC,MAAQJ,EACRK,WAAS,EACTC,SAXiB,SAACC,GAAD,OACrBN,EAAcM,EAAMC,cAAcJ,QAW9BK,WAT2B,SAACF,GACd,UAAdA,EAAMG,KAAiBR,KASvBS,OAAST,IAEX,0BACEU,cAtBiB,kBAAMb,GAAY,KAuBpCC,I,2BC1BEa,EAAwC,SAAC,GAM3C,IAJHxB,EAIE,EAJFA,OAAQF,EAIN,EAJMA,WACRb,EAGE,EAHFA,MAAOW,EAGL,EAHKA,OACP6B,EAEE,EAFFA,mBAAoBC,EAElB,EAFkBA,uBACpBnB,EACE,EADFA,wBAOJ,OACI,yBAAKoB,UAAYC,IAAEC,UACf,kBAACC,EAAA,EAAD,CAAYC,QAHD,kBAAMN,EAAmBzB,EAAQF,KAIxC,kBAACkC,EAAA,EAAD,OAEJ,yBAAKL,UAAYC,IAAEK,WACf,kBAACC,EAAA,EAAD,CACIC,MAAQ,UACRC,QAAUxC,EACVqB,SAbW,SAACoB,GAAD,OACvBX,EAAuB1B,EAASqC,EAAElB,cAAmCiB,QAAStC,MActE,0BAAM6B,UAAY/B,EAASgC,IAAEU,KAAOV,IAAEW,QAClC,kBAAC,EAAD,CACItD,MAAQA,EACRe,OAASA,EACTF,WAAaA,EACbS,wBAA0BA,Q,SChCrCiC,EAA0C,SAAC,GAK7C,IAHHzB,EAGE,EAHFA,MAAO0B,EAGL,EAHKA,iBACP3C,EAEE,EAFFA,WAAY4C,EAEV,EAFUA,gBACZC,EACE,EADFA,oBAEJ,EAA0BnC,mBAAiB,IAA3C,mBAAOoC,EAAP,KAAcC,EAAd,KAWMC,EAAa,kBAAM/B,EAAMgC,OAAOC,QAJlCP,EAAiB,IACjBC,GAAmB5C,GAAc4C,EAAgB3B,EAAOjB,QACxD6C,GAAuBA,EAAoB5B,MAN3C8B,GAAS,iBAAM,4BACfJ,EAAiB,MAiBrB,OACI,oCACI,6BACI,kBAAC3B,EAAA,EAAD,CACIC,MAAQA,EACRkC,QAAU,WACVL,QAAUA,EACV3B,SAhBM,SAACC,GAA0C,IAAD,EAC5D2B,GAAS,iBAAM,MACf,IAAM9B,EAAK,UAAGG,EAAMC,qBAAT,aAAG,EAAqBJ,MACnC0B,EAAiB1B,IAcLK,WAZQ,SAACF,GACH,UAAdA,EAAMG,KAAiByB,KAYfI,WAAaN,EACbO,MAAQ,UAEZ,kBAACrB,EAAA,EAAD,CACIK,MAAQ,UACRJ,QAAUe,GAEV,kBAACM,EAAA,EAAD,U,0BChCPC,EAAwC,SAAC,GAO3C,IALHvD,EAKE,EALFA,WAAYnB,EAKV,EALUA,OAAQM,EAKlB,EALkBA,MAAOqE,EAKzB,EALyBA,MAC3BC,EAIE,EAJFA,qBAAsB9B,EAIpB,EAJoBA,mBACtBiB,EAGE,EAHFA,gBAAiBhB,EAGf,EAHeA,uBACjB8B,EAEE,EAFFA,uBAAwBlD,EAEtB,EAFsBA,4BACxBC,EACE,EADFA,wBAGJ,EAAgCC,mBAAiB,IAAjD,mBAAOJ,EAAP,KAAiBqD,EAAjB,KAEMC,EAAcJ,EAAMlE,KAAI,SAACW,GAAD,OAC1B,kBAAC,EAAD,CACIsB,IAAMtB,EAAKlB,GACXmB,OAASD,EAAKlB,GACdiB,WAAaA,EACbb,MAAQc,EAAKd,MACbW,OAASG,EAAKH,OACd6B,mBAAqBA,EACrBC,uBAAyBA,EACzBnB,wBAA0BA,OAI5BoD,EAAe,SAACzC,GAClB,IAAMH,EAAQG,EAAMC,cAAcyC,UAClCL,EAAqBxC,EAA0BjB,IAKnD,OACI,kBAAC+D,EAAA,EAAD,CAAMC,MAAI,GACN,kBAACC,EAAA,EAAD,CAAOC,MAAQ,CAAEC,QAAS,SACtB,4BACI,kBAACnC,EAAA,EAAD,CAAYoC,SAAWpE,EAAaiC,QAN3B,kBAAMyB,EAAuB1D,KAOlC,kBAACkC,EAAA,EAAD,OAEJ,kBAAC,EAAD,CACI/C,MAAQA,EACRa,WAAaA,EACbQ,4BAA8BA,KAGtC,kBAAC,EAAD,CACIS,MAAQX,EACRN,WAAaA,EACb2C,iBAAmBgB,EACnBf,gBAAkBA,IAEpBgB,EACF,6BACI,kBAACS,EAAA,EAAD,CACIC,KAAO,QACPrC,QAAU4B,EACVV,QAAU,YACVd,MAAmB,QAAXxD,EAAmB,UAAY,WAJ3C,OAOA,kBAACwF,EAAA,EAAD,CACIC,KAAO,QACPrC,QAAU4B,EACVV,QAAU,YACVd,MAAmB,WAAXxD,EAAsB,UAAY,WAJ9C,UAOA,kBAACwF,EAAA,EAAD,CACIC,KAAO,QACPrC,QAAU4B,EACVV,QAAU,YACVd,MAAmB,cAAXxD,EAAyB,UAAY,WAJjD,iB,8DC9DP0F,EAAM,WAAO,IAAD,EACfC,EAAcC,cACdC,EAAcD,cACpB,EAAgD/D,mBAAiB,IAAjE,mBAAOiE,EAAP,KAAyBC,EAAzB,KACA,EAAkClE,mBAA+B,CAC7D,CAAE3B,GAAIyF,EAAarF,MAAO,gBAAiBN,OAAQ,OACnD,CAAEE,GAAI2F,EAAavF,MAAO,cAAeN,OAAQ,SAFrD,mBAAOgG,EAAP,KAAkBC,EAAlB,KAIA,EAA0BpE,oBAAQ,mBAC5B8D,EAAe,CACb,CAAEzF,GAAI0F,cAAMtF,MAAO,WAAYW,QAAQ,GACvC,CAAEf,GAAI0F,cAAMtF,MAAO,KAAMW,QAAQ,GACjC,CAAEf,GAAI0F,cAAMtF,MAAO,QAASW,QAAQ,KAJV,cAM5B4E,EAAe,CACb,CAAE3F,GAAI0F,cAAMtF,MAAO,OAAQW,QAAQ,GACnC,CAAEf,GAAI0F,cAAMtF,MAAO,SAAUW,QAAQ,GACrC,CAAEf,GAAI0F,cAAMtF,MAAO,OAAQW,QAAQ,KATT,IAAlC,mBAAO0D,EAAP,KAAcuB,EAAd,KAcMnD,EAAyB,SAAC1B,EAAgB8E,EAAiBhF,GAAlC,OAC3B+E,GAAS,kBAAMtF,EAAa+D,ECNR,SAACtD,EAAgBJ,EAAiBE,GAAlC,MAA0D,CAClFpB,KNtCyB,gBMuCzBI,QAAS,CACLkB,SACAJ,SACAE,eDCmCiF,CAA0B/E,EAAQ8E,EAAQhF,QAC3ES,EAA0B,SAACP,EAAgBf,EAAea,GAAhC,OAC5B+E,GAAS,kBAAMtF,EAAa+D,ECjBL,SAACtD,EAAgBI,EAAkBN,GAAnC,MAA2D,CACtFpB,KN9B6B,oBM+B7BI,QAAS,CACLkB,SACAI,WACAN,eDYmCiF,CAA6B/E,EAAQf,EAAOa,QAC7E2B,EAAqB,SAACzB,EAAgBF,GAAjB,OACvB+E,GAAS,kBAAMtF,EAAa+D,EClCV,SAACtD,EAAgBF,GAAjB,MAAyC,CAC/DpB,KNlBuB,cMmBvBI,QAAS,CACLkB,SACAF,eD8BmCiF,CAAwB/E,EAAQF,QACjE4C,EAAkB,SAACzD,EAAea,GAAhB,OACpB+E,GAAS,kBAAMtF,EAAa+D,EC9Cb,SAAC3D,EAAsBG,GAAvB,MAA+C,CAClEpB,KNVoB,WMWpBI,QAAS,CACLY,UAAW6E,cACX5E,eACAE,eAAe,EACfC,eDwCmCiF,CAAqB9F,EAAOa,QAE7D0D,EAAyB,SAAC1D,GAC5B8E,GAAa,kBAAMrG,EAAiBoG,EExDW,CACnDjG,KTJ2B,kBSK3BI,QAAS,CACLC,WFqD+Ee,QAC/E+E,GAAS,kBAAMtF,EAAa+D,EChCsB,CACtD5E,KNzB8B,qBM0B9BI,QAAS,CACLqB,YD6BiEL,SAO/DQ,EAA8B,SAACrB,EAAea,GAAhB,OAChC8E,GAAa,kBAAMrG,EAAiBoG,EEjD0C,CAClFjG,KTlBiC,wBSmBjCI,QAAS,CACLC,WF8CoFe,EE7CpFZ,iBF6CgGD,SAC9FsE,EAAuB,SAAC5E,EAAyBmB,GAA1B,OACzB8E,EAAarG,EAAiBoG,EE3CmD,CACrFjG,KTzBkC,yBS0BlCI,QAAS,CACLC,WFwC+Ee,EEvC/ET,UFuC2FV,OAEzFqG,EAAiBL,EAAUvF,KAAI,SAAAR,GACjC,IGtE+BqG,EHsE3BC,EInEqB,SAAC1G,EAAoBC,GAClD,OAAQA,EAAOC,MACX,KAAKyG,EACD,OAAO,YAAI3G,GACf,KAAK2G,EACD,OAAO3G,EAAMG,QAAO,SAAAoB,GAAI,OAAKA,EAAKH,UACtC,KAAKuF,EACD,OAAO3G,EAAMG,QAAO,SAAAoB,GAAI,OAAIA,EAAKH,UACrC,QACI,OAAO,YAAIpB,IJ0DQ4G,CAAkB9B,EAAO1E,EAAIC,KGtErBoG,EHsEoErG,EAAID,OGtEtC,CACrED,KAAMyG,EAAOF,MHsET,OAAO,kBAAC,EAAD,CACHnF,WAAalB,EAAIC,GACjBwC,IAAMzC,EAAIC,GACVF,OAASC,EAAID,OACbM,MAAQL,EAAIK,MACZqE,MAAQ4B,EACR3B,qBAAuBA,EACvBb,gBAAkBA,EAClBjB,mBAAqBA,EACrBC,uBAAyBA,EACzB8B,uBAAyBA,EACzBlD,4BAA8BA,EAC9BC,wBAA0BA,OAIlC,OACI,6BACI,kBAAC8E,EAAA,EAAD,CAAQC,SAAW,UACf,kBAACC,EAAA,EAAD,KACI,kBAACzD,EAAA,EAAD,CACI0D,KAAO,QACPrD,MAAQ,UACRsD,aAAa,QAEb,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAY1C,QAAU,MAAtB,eAGA,kBAACnB,EAAA,EAAD,CACIK,MAAQ,UACRsD,aAAa,SAEb,kBAAC,IAAD,SAIZ,kBAACG,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAChC,EAAA,EAAD,CAAM5B,WAAS,EAAC+B,MAAQ,CAAEC,QAAS,SAC/B,kBAAC,EAAD,CACIlD,MAAQ0D,EACRhC,iBAAmBiC,EACnB/B,oBAvDQ,SAAC1D,GACzB,IAAMO,EAAgB+E,cACtBK,GAAa,kBAAMrG,EAAiBoG,EEtDqC,CAC7EjG,KTVwB,eSWxBI,QAAS,CACLE,cFmDmFQ,EElDnFN,iBFkD4ED,EEjD5EE,kBAAmB,YFkDnB0F,GAAS,kBAAMtF,EAAa+D,EC9DL,SAAC9D,GAAD,MAA4B,CACvDd,KNJ+B,sBMK/BI,QAAS,CACLU,kBD2DmCuF,CAA6BvF,WAuDxD,kBAACqE,EAAA,EAAD,CAAM5B,WAAS,EAAC6D,QAAU,GACpBd,MK7GFe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDqI1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlE,GACLmE,QAAQnE,MAAMA,EAAMoE,c","file":"static/js/main.896c0a1d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ToDoItem_listItem__3EoOg\",\"done\":\"ToDoItem_done__fY9eC\",\"undone\":\"ToDoItem_undone__3LgIO\",\"container\":\"ToDoItem_container__ofRBV\"};","export const ALL = 'ALL'\nexport const ACTIVE = 'ACTIVE'\nexport const COMPLETED = 'COMPLETED'","import { ToDoListTypes } from '../../App'\nimport * as types from '../types/todolists'\nimport * as actions from '../actions/todolists'\n\nexport type RemoveTodosType = ReturnType<typeof actions.removeTodoList>\nexport type AddTodosType = ReturnType<typeof actions.addTodoList>\nexport type ChangeTodosTitleType = ReturnType<typeof actions.changeTodoListTitle>\nexport type ChangeTodosFilterType = ReturnType<typeof actions.changeTodoListFilter>\ntype ActionType = RemoveTodosType | AddTodosType | ChangeTodosTitleType | ChangeTodosFilterType\n\n\nexport const todolistsReducer = (state: Array<ToDoListTypes>, action: ActionType): ToDoListTypes[] => {\n    switch (action.type) {\n        case types.REMOVE_TODOLIST:\n            return state.filter(tdl => tdl.id !== action.payload.todolistId)\n        case types.ADD_TODOLIST:\n            return [\n                ...state,\n                {\n                    id: action.payload.newTodolistId,\n                    title: action.payload.newTodolistTitle,\n                    filter: action.payload.newTodolistFilter,\n                },\n            ]\n        case types.CHANGE_TODOLIST_TITLE:\n            return state.map(tdl => tdl.id === action.payload.todolistId ?\n                { ...tdl, title: action.payload.newTodolistTitle } : tdl)\n        case types.CHANGE_TODOLIST_FILTER:\n            return state.map(tdl => tdl.id === action.payload.todolistId ? {\n                ...tdl,\n                filter: action.payload.newFilter,\n            } : tdl)\n        default:\n            throw new Error(`I don't understand this type`)\n    }\n}","export const REMOVE_TODOLIST = 'REMOVE-TODOLIST'\nexport const ADD_TODOLIST = 'ADD-TODOLIST'\nexport const CHANGE_TODOLIST_TITLE = 'CHANGE-TODOLIST-TITLE'\nexport const CHANGE_TODOLIST_FILTER = 'CHANGE-TODOLIST-FILTER'","import * as types from '../types/tasks'\nimport * as actions from '../actions/tasks'\nimport { TaskStateTypes, TaskTypes } from '../../App'\nimport clone from 'clone-deep'\n\nexport type AddNewTaskArrayType = ReturnType<typeof actions.addNewTaskArray>\nexport type AddTaskType = ReturnType<typeof actions.addTask>\nexport type RemoveTaskType = ReturnType<typeof actions.removeTask>\nexport type RemoveTasksArrayType = ReturnType<typeof actions.removeTasksArray>\nexport type ChangeTaskTitleType = ReturnType<typeof actions.changeTaskTitle>\nexport type ChangeSelectType = ReturnType<typeof actions.changeSelect>\n\nexport type ActionType = AddNewTaskArrayType | AddTaskType | RemoveTaskType |\n    RemoveTasksArrayType | ChangeTaskTitleType | ChangeSelectType\n\nexport const tasksReducer = (state: TaskStateTypes, action: ActionType): TaskStateTypes => {\n    switch (action.type) {\n        case types.ADD_NEW_TASKS_ARRAY:\n            return { ...state, [ action.payload.newToDoListId ]: [] }\n        case types.ADD_TASK:\n            const newTask: TaskTypes = {\n                id: action.payload.newTaskId,\n                title: action.payload.newTaskTitle,\n                isDone: action.payload.newTaskIsDone,\n            }\n            const { toDoListId } = action.payload\n            return {\n                ...state,\n                [ toDoListId ]: [newTask, ...state[ toDoListId ]],\n            }\n        case types.REMOVE_TASK:\n            return {\n                ...state,\n                [ action.payload.toDoListId ]: state[ action.payload.toDoListId ]\n                    .filter(task => task.id !== action.payload.taskId),\n            }\n        case types.REMOVE_TASKS_ARRAY:\n            const cloneState = clone(state)\n            delete cloneState[ action.payload.toDoListsId ]\n            return { ...cloneState }\n        case types.CHANGE_TASK_TITLE:\n            return {\n                ...state,\n                [ action.payload.toDoListId ]: state[ action.payload.toDoListId ]\n                    .map(task => task.id === action.payload.taskId ? {\n                        ...task,\n                        title: action.payload.newTitle,\n                    } : task),\n            }\n        case types.CHANGE_SELECT:\n            return {\n                ...state,\n                [ action.payload.toDoListId ]: state[ action.payload.toDoListId ]\n                    .map(task => task.id === action.payload.taskId ? { ...task, isDone: action.payload.isDone } : task),\n            }\n        default:\n            throw new Error(`I don't understand this action type`)\n    }\n}","export const ADD_NEW_TASKS_ARRAY = 'ADD-NEW-TASKS-ARRAY'\nexport const ADD_TASK = 'ADD-TASK'\n\nexport const REMOVE_TASK = 'REMOVE-TASK'\nexport const REMOVE_TASKS_ARRAY = 'REMOVE-TASKS-ARRAY'\n\nexport const CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE'\nexport const CHANGE_SELECT = 'CHANGE-SELECT'","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\nimport { TextField } from '@material-ui/core'\n\ntype EditableTitleTypes = {\n    title: string\n    taskId?: string\n    toDoListId: string\n    changeToDoListTitleCallback?: (title: string, toDoListId: string) => void\n    changeTaskTitleCallback?: (taskId: string, title: string, toDoListId: string) => void\n}\n\nexport const EditableTitle: React.FC<EditableTitleTypes> = (\n    {\n        title, toDoListId, taskId,\n        changeToDoListTitleCallback, changeTaskTitleCallback,\n    }) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [localTitle, setLocalTitle] = useState<string>(title)\n\n    const activateEditMode = () => setEditMode(true)\n    const activateViewMode = () => {\n        changeToDoListTitleCallback && changeToDoListTitleCallback(localTitle, toDoListId)\n        changeTaskTitleCallback && taskId && changeTaskTitleCallback(taskId, localTitle, toDoListId)\n        setEditMode(false)\n    }\n    const changeLocalTitle = (event: ChangeEvent<HTMLInputElement>) =>\n        setLocalTitle(event.currentTarget.value)\n\n    const onKeyPressActivateViewMode = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') activateViewMode()\n    }\n\n    return editMode\n        ? <TextField\n            value={ localTitle }\n            autoFocus\n            onChange={ changeLocalTitle }\n            onKeyPress={ onKeyPressActivateViewMode }\n            onBlur={ activateViewMode }\n        />\n        : <span\n            onDoubleClick={ activateEditMode }\n        >{ localTitle }</span>\n}","import React, { ChangeEvent } from 'react'\nimport s from './ToDoItem.module.css'\nimport { EditableTitle } from '../EditableTitle/EditableTitle'\nimport { Checkbox, IconButton } from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\n\ntype ToDoItemPropTypes = {\n    taskId: string\n    toDoListId: string\n    title: string\n    isDone: boolean\n    deleteTaskCallback: (taskId: string, toDoListId: string) => void\n    changeSelectedCallback: (taskId: string, select: boolean, toDoListId: string) => void\n    changeTaskTitleCallback: (taskId: string, title: string, toDoListId: string) => void\n}\n\nexport const ToDoItem: React.FC<ToDoItemPropTypes> = (\n    {\n        taskId, toDoListId,\n        title, isDone,\n        deleteTaskCallback, changeSelectedCallback,\n        changeTaskTitleCallback,\n    }) => {\n\n    const onChangeTaskStatus = (e: ChangeEvent) =>\n        changeSelectedCallback(taskId, (e.currentTarget as HTMLInputElement).checked, toDoListId)\n\n    const deleteTask = () => deleteTaskCallback(taskId, toDoListId)\n    return (\n        <div className={ s.listItem }>\n            <IconButton onClick={ deleteTask }>\n                <Delete/>\n            </IconButton>\n            <div className={ s.container }>\n                <Checkbox\n                    color={ 'primary' }\n                    checked={ isDone }\n                    onChange={ onChangeTaskStatus }\n                />\n                <span className={ isDone ? s.done : s.undone }>\n                    <EditableTitle\n                        title={ title }\n                        taskId={ taskId }\n                        toDoListId={ toDoListId }\n                        changeTaskTitleCallback={ changeTaskTitleCallback }\n                    />\n                </span>\n            </div>\n        </div>\n    )\n}","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\nimport { IconButton, TextField } from '@material-ui/core'\nimport { AddBox } from '@material-ui/icons'\n\nexport type AddItemFormTypes = {\n    value: string\n    setValueCallback: (value: string) => void\n    toDoListId?: string\n    addTaskCallback?: (title: string, toDoListId: string) => void\n    addToDoListCallback?: (title: string) => void\n}\n\nexport const AddItemForm: React.FC<AddItemFormTypes> = (\n    {\n        value, setValueCallback,\n        toDoListId, addTaskCallback,\n        addToDoListCallback,\n    }) => {\n    const [error, setError] = useState<string>('')\n\n    const addError = () => {\n        setError(() => 'Title is required')\n        setValueCallback('')\n    }\n    const addNewValue = () => {\n        setValueCallback('')\n        addTaskCallback && toDoListId && addTaskCallback(value, toDoListId)\n        addToDoListCallback && addToDoListCallback(value)\n    }\n    const onAddValue = () => value.trim().length ? addNewValue() : addError()\n    const onChangeValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setError(() => '')\n        const value = event.currentTarget?.value\n        setValueCallback(value)\n    }\n    const onKeyPressValue = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') onAddValue()\n    }\n\n    return (\n        <>\n            <div>\n                <TextField\n                    value={ value }\n                    variant={ 'outlined' }\n                    error={ !!error }\n                    onChange={ onChangeValue }\n                    onKeyPress={ onKeyPressValue }\n                    helperText={ error }\n                    label={ 'Title' }\n                />\n                <IconButton\n                    color={ 'primary' }\n                    onClick={ onAddValue }\n                >\n                    <AddBox/>\n                </IconButton>\n            </div>\n        </>\n    )\n}","import React, { useState, MouseEvent } from 'react'\nimport { ToDoItem } from '../ToDoItem/ToDoItem'\nimport { FilterPropTypes, TaskTypes } from '../../App'\nimport { AddItemForm } from '../AddItemForm/AddItemForm'\nimport { EditableTitle } from '../EditableTitle/EditableTitle'\nimport { Button, Grid, IconButton, Paper } from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\n\n\nexport type ToDoListPropTypes = {\n    toDoListId: string\n    filter: FilterPropTypes\n    title: string\n    tasks: Array<TaskTypes>\n    changeFilterCallback: (filter: FilterPropTypes, toDoListId: string) => void\n    addTaskCallback: (title: string, toDoListId: string) => void\n    deleteTaskCallback: (taskId: string, toDoListId: string) => void\n    changeSelectedCallback: (taskId: string, select: boolean, toDoListId: string) => void\n    deleteToDoListCallback: (toDoListId: string) => void\n    changeToDoListTitleCallback: (title: string, toDoListId: string) => void\n    changeTaskTitleCallback: (taskId: string, title: string, toDoListId: string) => void\n}\n\nexport const ToDoList: React.FC<ToDoListPropTypes> = (\n    {\n        toDoListId, filter, title, tasks,\n        changeFilterCallback, deleteTaskCallback,\n        addTaskCallback, changeSelectedCallback,\n        deleteToDoListCallback, changeToDoListTitleCallback,\n        changeTaskTitleCallback,\n    }) => {\n\n    const [newTitle, setNewTitle] = useState<string>('')\n\n    const mappedTasks = tasks.map((task) => (\n        <ToDoItem\n            key={ task.id }\n            taskId={ task.id }\n            toDoListId={ toDoListId }\n            title={ task.title }\n            isDone={ task.isDone }\n            deleteTaskCallback={ deleteTaskCallback }\n            changeSelectedCallback={ changeSelectedCallback }\n            changeTaskTitleCallback={ changeTaskTitleCallback }\n        />\n    ))\n\n    const changeFilter = (event: MouseEvent<HTMLButtonElement>) => {\n        const value = event.currentTarget.innerText\n        changeFilterCallback(value as FilterPropTypes, toDoListId)\n    }\n\n    const deleteToDoListId = () => deleteToDoListCallback(toDoListId)\n\n    return (\n        <Grid item>\n            <Paper style={ { padding: '10px' } }>\n                <h3>\n                    <IconButton tabIndex={ toDoListId } onClick={ deleteToDoListId }>\n                        <Delete/>\n                    </IconButton>\n                    <EditableTitle\n                        title={ title }\n                        toDoListId={ toDoListId }\n                        changeToDoListTitleCallback={ changeToDoListTitleCallback }\n                    />\n                </h3>\n                <AddItemForm\n                    value={ newTitle }\n                    toDoListId={ toDoListId }\n                    setValueCallback={ setNewTitle }\n                    addTaskCallback={ addTaskCallback }\n                />\n                { mappedTasks }\n                <div>\n                    <Button\n                        size={ 'small' }\n                        onClick={ changeFilter }\n                        variant={ 'contained' }\n                        color={ filter === 'ALL' ? 'primary' : 'default' }\n                    >All\n                    </Button>\n                    <Button\n                        size={ 'small' }\n                        onClick={ changeFilter }\n                        variant={ 'contained' }\n                        color={ filter === 'ACTIVE' ? 'primary' : 'default' }\n                    >Active\n                    </Button>\n                    <Button\n                        size={ 'small' }\n                        onClick={ changeFilter }\n                        variant={ 'contained' }\n                        color={ filter === 'COMPLETED' ? 'primary' : 'default' }\n                    >Completed\n                    </Button>\n                </div>\n            </Paper>\n        </Grid>\n    )\n}","import React, { useState } from 'react'\r\nimport { v1 } from 'uuid'\r\nimport * as todolistsActions from './state/actions/todolists'\r\nimport * as tasksActions from './state/actions/tasks'\r\nimport * as taskFilterActions from './state/actions/taskFilter'\r\nimport { todolistsReducer } from './state/reducers/todolists'\r\nimport { tasksReducer } from './state/reducers/tasks'\r\nimport { taskFilterReducer } from './state/reducers/taskFilter'\r\nimport { ToDoList } from './components/ToDoList/ToDoList'\r\nimport { AddItemForm } from './components/AddItemForm/AddItemForm'\r\nimport { AppBar, Container, Grid, IconButton, Toolbar, Typography } from '@material-ui/core'\r\nimport { Menu } from '@material-ui/icons'\r\nimport AccountCircle from '@material-ui/icons/AccountCircle'\r\n// Types\r\nexport type FilterPropTypes = 'ALL' | 'ACTIVE' | 'COMPLETED'\r\nexport type ToDoListTypes = {\r\n    id: string\r\n    title: string\r\n    filter: FilterPropTypes\r\n}\r\nexport type TaskTypes = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TaskStateTypes = { [ key: string ]: Array<TaskTypes> }\r\n\r\nexport const App = () => {\r\n    const toDoListId1 = v1()\r\n    const toDoListId2 = v1()\r\n    const [newToDoListTitle, setNewToDoListTitle] = useState<string>('')\r\n    const [toDoLists, setToDoLists] = useState<Array<ToDoListTypes>>([\r\n        { id: toDoListId1, title: 'What to learn', filter: 'ALL' },\r\n        { id: toDoListId2, title: 'What to buy', filter: 'ALL' },\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateTypes>({\r\n        [ toDoListId1 ]: [\r\n            { id: v1(), title: 'HTML&CSS', isDone: true },\r\n            { id: v1(), title: 'JS', isDone: true },\r\n            { id: v1(), title: 'React', isDone: false },\r\n        ],\r\n        [ toDoListId2 ]: [\r\n            { id: v1(), title: 'Beer', isDone: true },\r\n            { id: v1(), title: 'Cheese', isDone: true },\r\n            { id: v1(), title: 'Meat', isDone: false },\r\n        ],\r\n    })\r\n\r\n    // with reducers\r\n    const changeSelectedCallback = (taskId: string, select: boolean, toDoListId: string) =>\r\n        setTasks(() => tasksReducer(tasks, tasksActions.changeSelect(taskId, select, toDoListId)))\r\n    const changeTaskTitleCallback = (taskId: string, title: string, toDoListId: string) =>\r\n        setTasks(() => tasksReducer(tasks, tasksActions.changeTaskTitle(taskId, title, toDoListId)))\r\n    const deleteTaskCallback = (taskId: string, toDoListId: string) =>\r\n        setTasks(() => tasksReducer(tasks, tasksActions.removeTask(taskId, toDoListId)))\r\n    const addTaskCallback = (title: string, toDoListId: string) =>\r\n        setTasks(() => tasksReducer(tasks, tasksActions.addTask(title, toDoListId)))\r\n\r\n    const deleteToDoListCallback = (toDoListId: string) => {\r\n        setToDoLists(() => todolistsReducer(toDoLists, todolistsActions.removeTodoList(toDoListId)))\r\n        setTasks(() => tasksReducer(tasks, tasksActions.removeTasksArray(toDoListId)))\r\n    }\r\n    const addToDoListCallback = (title: string) => {\r\n        const newToDoListId = v1()\r\n        setToDoLists(() => todolistsReducer(toDoLists, todolistsActions.addTodoList(title, newToDoListId)))\r\n        setTasks(() => tasksReducer(tasks, tasksActions.addNewTaskArray(newToDoListId)))\r\n    }\r\n    const changeToDoListTitleCallback = (title: string, toDoListId: string) =>\r\n        setToDoLists(() => todolistsReducer(toDoLists, todolistsActions.changeTodoListTitle(toDoListId, title)))\r\n    const changeFilterCallback = (filter: FilterPropTypes, toDoListId: string) =>\r\n        setToDoLists(todolistsReducer(toDoLists, todolistsActions.changeTodoListFilter(toDoListId, filter)))\r\n    \r\n    const mappedToDoList = toDoLists.map(tdl => {\r\n        let tasksForToDoList = taskFilterReducer(tasks[ tdl.id ], taskFilterActions.changeTasksArrayFilter(tdl.filter))\r\n        return <ToDoList\r\n            toDoListId={ tdl.id }\r\n            key={ tdl.id }\r\n            filter={ tdl.filter }\r\n            title={ tdl.title }\r\n            tasks={ tasksForToDoList }\r\n            changeFilterCallback={ changeFilterCallback }\r\n            addTaskCallback={ addTaskCallback }\r\n            deleteTaskCallback={ deleteTaskCallback }\r\n            changeSelectedCallback={ changeSelectedCallback }\r\n            deleteToDoListCallback={ deleteToDoListCallback }\r\n            changeToDoListTitleCallback={ changeToDoListTitleCallback }\r\n            changeTaskTitleCallback={ changeTaskTitleCallback }\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position={ 'static' }>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge={ 'start' }\r\n                        color={ 'inherit' }\r\n                        aria-label={ 'menu' }\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={ 'h6' }>\r\n                        To Do Clone\r\n                    </Typography>\r\n                    <IconButton\r\n                        color={ 'inherit' }\r\n                        aria-label={ 'login' }\r\n                    >\r\n                        <AccountCircle/>\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={ { padding: '20px' } }>\r\n                    <AddItemForm\r\n                        value={ newToDoListTitle }\r\n                        setValueCallback={ setNewToDoListTitle }\r\n                        addToDoListCallback={ addToDoListCallback }\r\n                    />\r\n                </Grid>\r\n                <Grid container spacing={ 1 }>\r\n                    { mappedToDoList }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import * as types from '../types/tasks'\nimport { v1 } from 'uuid'\n\nexport const addNewTaskArray = (newToDoListId: string) => ({\n    type: types.ADD_NEW_TASKS_ARRAY,\n    payload: {\n        newToDoListId,\n    },\n} as const)\n\nexport const addTask = (newTaskTitle: string, toDoListId: string) => ({\n    type: types.ADD_TASK,\n    payload: {\n        newTaskId: v1(),\n        newTaskTitle,\n        newTaskIsDone: false,\n        toDoListId,\n    },\n} as const)\n\nexport const removeTask = (taskId: string, toDoListId: string) => ({\n    type: types.REMOVE_TASK,\n    payload: {\n        taskId,\n        toDoListId,\n    },\n} as const)\n\nexport const removeTasksArray = (toDoListsId: string) => ({\n    type: types.REMOVE_TASKS_ARRAY,\n    payload: {\n        toDoListsId,\n    },\n} as const)\n\nexport const changeTaskTitle = (taskId: string, newTitle: string, toDoListId: string) => ({\n    type: types.CHANGE_TASK_TITLE,\n    payload: {\n        taskId,\n        newTitle,\n        toDoListId,\n    },\n} as const)\n\nexport const changeSelect = (taskId: string, isDone: boolean, toDoListId: string) => ({\n    type: types.CHANGE_SELECT,\n    payload: {\n        taskId,\n        isDone,\n        toDoListId,\n    },\n} as const)","import * as types from '../types/todolists'\nimport { FilterPropTypes } from '../../App'\n\nexport const removeTodoList = (todolistId: string) => ({\n    type: types.REMOVE_TODOLIST,\n    payload: {\n        todolistId,\n    },\n} as const)\n\nexport const addTodoList = (newTodolistTitle: string, newTodolistId: string) => ({\n    type: types.ADD_TODOLIST,\n    payload: {\n        newTodolistId,\n        newTodolistTitle,\n        newTodolistFilter: 'ALL',\n    },\n} as const)\n\nexport const changeTodoListTitle = (todolistId: string, newTodolistTitle: string) => ({\n    type: types.CHANGE_TODOLIST_TITLE,\n    payload: {\n        todolistId,\n        newTodolistTitle,\n    },\n} as const)\n\nexport const changeTodoListFilter = (todolistId: string, newFilter: FilterPropTypes) => ({\n    type: types.CHANGE_TODOLIST_FILTER,\n    payload: {\n        todolistId,\n        newFilter,\n    },\n} as const)","import { FilterPropTypes } from '../../App'\nimport * as types from '../types/taskFilter'\n\nexport const changeTasksArrayFilter = (filterValue: FilterPropTypes) => ({\n    type: types[ filterValue ],\n} as const)","import * as types from '../types/taskFilter'\nimport * as actions from '../actions/taskFilter'\nimport { TaskTypes } from '../../App'\n\nexport type ActionType = ReturnType<typeof actions.changeTasksArrayFilter>\n\nexport const taskFilterReducer = (state: TaskTypes[], action: ActionType): TaskTypes[] => {\n    switch (action.type) {\n        case types.ALL:\n            return [...state]\n        case types.ACTIVE:\n            return state.filter(task => !task.isDone)\n        case types.COMPLETED:\n            return state.filter(task => task.isDone)\n        default:\n            return [...state]\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport { App } from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'))\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}