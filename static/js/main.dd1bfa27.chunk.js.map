{"version":3,"sources":["ToDoList/ToDoList.module.css","ToDoItem/ToDoItem.module.css","components/Button.module.css","components/Button.tsx","ToDoItem/ToDoItem.tsx","ToDoList/ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","itemId","toDoListId","deleteTaskCallback","className","s","deleteButton","onClick","ToDoItem","taskId","title","isDone","changeSelectedCallback","listItem","container","type","checked","onChange","e","currentTarget","done","undone","ToDoList","filter","tasks","changeFilterCallback","addTaskCallback","deleteToDoListCallback","useState","error","setError","newTitle","setNewTitle","inputStyle","length","correct","mappedTasks","map","task","id","key","changeFilter","event","value","target","innerText","onAddTitleHandler","trim","toDoListContainer","commonInput","join","onKeyPress","errorMessage","list","buttonActive","buttonCommon","App","toDoListId1","v1","toDoListId2","toDoLists","setToDoLists","setTasks","addTask","t","deleteTask","select","changeSelected","tdl","changeToDoListFilter","toDoListsId","mappedToDoList","tasksForToDoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.dd1bfa27.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"toDoListContainer\":\"ToDoList_toDoListContainer__15FP7\",\"list\":\"ToDoList_list__1psfT\",\"correct\":\"ToDoList_correct__2pb4X\",\"error\":\"ToDoList_error__26CT6\",\"errorMessage\":\"ToDoList_errorMessage__2xqLq\",\"commonInput\":\"ToDoList_commonInput__1LfRb\",\"buttonActive\":\"ToDoList_buttonActive__1oHIj\",\"buttonCommon\":\"ToDoList_buttonCommon__8LCpY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ToDoItem_listItem__12PRA\",\"done\":\"ToDoItem_done__ajnT-\",\"undone\":\"ToDoItem_undone__C9uuD\",\"container\":\"ToDoItem_container__242_7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteButton\":\"Button_deleteButton__38hJd\"};","import React from 'react'\nimport s from './Button.module.css'\n\ntype ButtonPropTypes = {\n    itemId: string\n    toDoListId: string\n    deleteTaskCallback: (taskId: string, toDoListId: string) => void\n}\n\nexport const Button: React.FC<ButtonPropTypes> = (\n    {\n        itemId,\n        toDoListId,\n        deleteTaskCallback\n    }) => {\n\n    const deleteCallback = () => deleteTaskCallback(itemId, toDoListId)\n\n    return <button className={ s.deleteButton } onClick={ deleteCallback }>x</button>\n}","import React, { ChangeEvent } from 'react'\nimport { Button } from '../components/Button'\nimport s from './ToDoItem.module.css'\n\ntype ToDoItemPropTypes = {\n    taskId: string\n    toDoListId: string\n    title: string\n    isDone: boolean\n    deleteTaskCallback: (taskId: string, toDoListId: string) => void\n    changeSelectedCallback: (taskId: string, select: boolean, toDoListId: string) => void\n}\n\nexport const ToDoItem: React.FC<ToDoItemPropTypes> = (\n    {\n        taskId, toDoListId,\n        title, isDone,\n        deleteTaskCallback, changeSelectedCallback,\n    }) => {\n\n    const onChangeTaskStatus = (e: ChangeEvent) =>\n        changeSelectedCallback(taskId, (e.currentTarget as HTMLInputElement).checked, toDoListId)\n\n    return (\n        <li className={ s.listItem }>\n            <Button\n                itemId={ taskId }\n                toDoListId={ toDoListId }\n                deleteTaskCallback={ deleteTaskCallback }\n            >\n            </Button>\n            <div className={ s.container }>\n                <input\n                    type=\"checkbox\"\n                    checked={ isDone }\n                    onChange={ onChangeTaskStatus }\n                />\n                <span className={ isDone ? s.done : s.undone }>{ title }</span>\n            </div>\n        </li>\n    )\n}","import React, { useState, MouseEvent, ChangeEvent, KeyboardEvent } from 'react'\nimport { ToDoItem } from '../ToDoItem/ToDoItem'\nimport { FilterPropTypes, TaskPropTypes } from '../App'\nimport s from './ToDoList.module.css'\n\n\nexport type ToDoListPropTypes = {\n    toDoListId: string\n    filter: FilterPropTypes\n    title: string\n    tasks: Array<TaskPropTypes>\n    changeFilterCallback: (filter: FilterPropTypes, toDoListId: string) => void\n    addTaskCallback: (title: string, toDoListId: string) => void\n    deleteTaskCallback: (taskId: string, toDoListId: string) => void\n    changeSelectedCallback: (taskId: string, select: boolean, toDoListId: string) => void\n    deleteToDoListCallback: (toDoListId: string) => void\n}\n\nexport const ToDoList: React.FC<ToDoListPropTypes> = (\n    {\n        toDoListId, filter, title, tasks,\n        changeFilterCallback, deleteTaskCallback,\n        addTaskCallback, changeSelectedCallback,\n        deleteToDoListCallback,\n    }) => {\n\n    const [error, setError] = useState<string>('')\n    const [newTitle, setNewTitle] = useState<string>('')\n\n    const inputStyle = error.length ? s.error : s.correct\n\n    const mappedTasks = tasks.map((task) => (\n        <ToDoItem\n            taskId={ task.id }\n            toDoListId={ toDoListId }\n            title={ task.title }\n            isDone={ task.isDone }\n            deleteTaskCallback={ deleteTaskCallback }\n            changeSelectedCallback={ changeSelectedCallback }\n            key={ task.id }\n        />\n    ))\n\n    const changeFilter = (event: MouseEvent<HTMLButtonElement>) => {\n        const value = (event.target as HTMLElement).innerText as FilterPropTypes\n        changeFilterCallback(value, toDoListId)\n    }\n    const addError = () => {\n        setError(() => 'Title is required')\n        setNewTitle(() => '')\n    }\n    const addNewTask = () => {\n        setNewTitle(() => '')\n        addTaskCallback(newTitle, toDoListId)\n    }\n    const onAddTitleHandler = () => newTitle.trim().length ? addNewTask() : addError()\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n        setError(() => '')\n        const value = event.target?.value\n        setNewTitle(() => value)\n    }\n    const onKeyPressHandler = (event: KeyboardEvent) => {\n        if (event.key === 'Enter') onAddTitleHandler()\n    }\n    const deleteToDoList = () => deleteToDoListCallback(toDoListId)\n\n    return (\n        <div className={ s.toDoListContainer }>\n            <button onClick={ deleteToDoList }>X</button>\n            <h3>{ title }\n            </h3>\n            <div>\n                <input\n                    className={ [inputStyle, s.commonInput].join(' ') }\n                    value={ newTitle }\n                    onChange={ onChangeHandler }\n                    onKeyPress={ onKeyPressHandler }/>\n                <button onClick={ onAddTitleHandler }> +</button>\n                <span className={ s.errorMessage }>{ error }</span>\n            </div>\n            <ul className={ s.list }>\n                { mappedTasks }\n            </ul>\n            <div>\n                <button\n                    className={ filter === 'All' ? s.buttonActive : s.buttonCommon }\n                    onClick={ changeFilter }\n                >All\n                </button>\n                <button\n                    className={ filter === 'Active' ? s.buttonActive : s.buttonCommon }\n                    onClick={ changeFilter }\n                >Active\n                </button>\n                <button\n                    className={ filter === 'Completed' ? s.buttonActive : s.buttonCommon }\n                    onClick={ changeFilter }\n                >Completed\n                </button>\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react'\r\nimport { v1 } from 'uuid'\r\nimport { ToDoList } from './ToDoList/ToDoList'\r\nimport './App.css'\r\n\r\nexport type FilterPropTypes = 'All' | 'Active' | 'Completed'\r\n\r\nexport type ToDoListTypes = {\r\n    id: string\r\n    title: string\r\n    filter: FilterPropTypes\r\n}\r\n\r\nexport type TaskPropTypes = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TaskStateTypes = { [ key: string ]: Array<TaskPropTypes> }\r\n\r\nexport const addTask = (tasks: TaskStateTypes, title: string, toDoListId: string): TaskStateTypes => {\r\n    const task = { id: v1(), title, isDone: false }\r\n    return { ...tasks, [ toDoListId ]: [task, ...tasks[ toDoListId ]] }\r\n}\r\n\r\nexport const deleteTask = (tasks: TaskStateTypes, taskId: string, toDoListId: string): TaskStateTypes => {\r\n    return { ...tasks, [ toDoListId ]: tasks[ toDoListId ].filter(t => t.id !== taskId) }\r\n}\r\n\r\nexport const changeSelected = (tasks: TaskStateTypes, taskId: string, isDone: boolean, toDoListId: string): TaskStateTypes => {\r\n    return {\r\n        ...tasks,\r\n        [ toDoListId ]: tasks[ toDoListId ].map(task => task.id === taskId ? { ...task, isDone } : task),\r\n    }\r\n}\r\n\r\nexport const changeToDoListFilter = (toDoLists: Array<ToDoListTypes>, filter: FilterPropTypes, toDoListId: string) => {\r\n    return toDoLists.map(tdl => tdl.id === toDoListId ? { ...tdl, filter } : tdl)\r\n}\r\n\r\nexport const App = () => {\r\n    const toDoListId1 = v1()\r\n    const toDoListId2 = v1()\r\n    const [toDoLists, setToDoLists] = useState<Array<ToDoListTypes>>([\r\n        { id: toDoListId1, title: 'What to learn', filter: 'All' },\r\n        { id: toDoListId2, title: 'What to buy', filter: 'All' },\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateTypes>({\r\n        [ toDoListId1 ]: [\r\n            { id: v1(), title: 'HTML&CSS', isDone: true },\r\n            { id: v1(), title: 'JS', isDone: true },\r\n            { id: v1(), title: 'React', isDone: false },\r\n        ],\r\n        [ toDoListId2 ]: [\r\n            { id: v1(), title: 'Beer', isDone: true },\r\n            { id: v1(), title: 'Cheese', isDone: true },\r\n            { id: v1(), title: 'Meat', isDone: false },\r\n        ],\r\n    })\r\n\r\n    const addTaskCallback = (title: string, toDoListId: string) => setTasks(() =>\r\n        addTask(tasks, title, toDoListId))\r\n    const deleteTaskCallback = (taskId: string, toDoListId: string) => setTasks(() =>\r\n        deleteTask(tasks, taskId, toDoListId))\r\n    const changeSelectedCallback = (taskId: string, select: boolean, toDoListId: string) =>\r\n        setTasks(changeSelected(tasks, taskId, select, toDoListId))\r\n    const changeFilterCallback = (filter: FilterPropTypes, toDoListId: string) =>\r\n        setToDoLists(changeToDoListFilter(toDoLists, filter, toDoListId))\r\n    const deleteToDoListCallback = (toDoListsId: string) => {\r\n        setToDoLists(toDoLists.filter(tdl => tdl.id !== toDoListsId))\r\n        delete tasks[ toDoListsId ]\r\n    }\r\n\r\n\r\n    const mappedToDoList = toDoLists.map(tdl => {\r\n        let tasksForToDoList = tasks[ tdl.id ]\r\n        switch (tdl.filter) {\r\n            case ('Active'):\r\n                tasksForToDoList = tasks[ tdl.id ].filter(t => !t.isDone)\r\n                break\r\n            case ('Completed'):\r\n                tasksForToDoList = tasks[ tdl.id ].filter(t => t.isDone)\r\n                break\r\n        }\r\n\r\n        return <ToDoList\r\n            toDoListId={ tdl.id }\r\n            key={ tdl.id }\r\n            filter={ tdl.filter }\r\n            title={ tdl.title }\r\n            tasks={ tasksForToDoList }\r\n            changeFilterCallback={ changeFilterCallback }\r\n            addTaskCallback={ addTaskCallback }\r\n            deleteTaskCallback={ deleteTaskCallback }\r\n            changeSelectedCallback={ changeSelectedCallback }\r\n            deleteToDoListCallback={ deleteToDoListCallback }\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            { mappedToDoList }\r\n        </div>\r\n    )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport { App } from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'))\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}